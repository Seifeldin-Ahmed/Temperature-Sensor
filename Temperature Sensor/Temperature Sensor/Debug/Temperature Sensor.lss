
Temperature Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000d98  00000e2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006e  0080006e  00000e3a  2**0
                  ALLOC
  3 .stab         00001674  00000000  00000000  00000e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000004c0  00000000  00000000  000024b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00002970  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014cc  00000000  00000000  00002af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f0  00000000  00000000  00003fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c41  00000000  00000000  000046ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000378  00000000  00000000  000052f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b8  00000000  00000000  00005668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e4b  00000000  00000000  00005d20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 90 03 	jmp	0x720	; 0x720 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e9       	ldi	r30, 0x98	; 152
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 89 00 	call	0x112	; 0x112 <main>
  8a:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <function>:
#include "../HAL/PORT/PORT_int.h"
#include "../HAL/LCD/LCD_int.h"
#include "../MCAL/ADC/ADC_int.h"

void function (u16* DigitalValue)
{   LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	ec 01       	movw	r28, r24
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_enuSendInstruction>
	LCD_enuSendString("Temperature: ");
  9e:	80 e6       	ldi	r24, 0x60	; 96
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_enuSendString>
	// 1 degree ----> 10mv
	// x degree ---->  ?
	u16 AnalogValue = ((*DigitalValue)*5000.0)/1024; // to be in mili volt
  a6:	68 81       	ld	r22, Y
  a8:	79 81       	ldd	r23, Y+1	; 0x01
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 a3 05 	call	0xb46	; 0xb46 <__floatunsisf>
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	30 e4       	ldi	r19, 0x40	; 64
  b6:	4c e9       	ldi	r20, 0x9C	; 156
  b8:	55 e4       	ldi	r21, 0x45	; 69
  ba:	0e 94 09 06 	call	0xc12	; 0xc12 <__mulsf3>
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	40 e8       	ldi	r20, 0x80	; 128
  c4:	5a e3       	ldi	r21, 0x3A	; 58
  c6:	0e 94 09 06 	call	0xc12	; 0xc12 <__mulsf3>
  ca:	0e 94 77 05 	call	0xaee	; 0xaee <__fixunssfsi>
  ce:	dc 01       	movw	r26, r24
  d0:	cb 01       	movw	r24, r22
	AnalogValue /=10; 
  d2:	6a e0       	ldi	r22, 0x0A	; 10
  d4:	70 e0       	ldi	r23, 0x00	; 0
  d6:	0e 94 94 06 	call	0xd28	; 0xd28 <__udivmodhi4>
	LCD_enuSendNumber(AnalogValue);
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 24 02 	call	0x448	; 0x448 <LCD_enuSendNumber>
     LCD_enuSendCharacter(0xDF);
  e2:	8f ed       	ldi	r24, 0xDF	; 223
  e4:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_enuSendCharacter>
     LCD_enuSendCharacter(0x43);
  e8:	83 e4       	ldi	r24, 0x43	; 67
  ea:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_enuSendCharacter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	92 e5       	ldi	r25, 0x52	; 82
  f2:	a7 e0       	ldi	r26, 0x07	; 7
  f4:	81 50       	subi	r24, 0x01	; 1
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	a0 40       	sbci	r26, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <function+0x62>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <function+0x6c>
  fe:	00 00       	nop
	_delay_ms(300);
	LED_enuTurnOff(DIO_u8_PORTD,0);
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	0e 94 25 03 	call	0x64a	; 0x64a <LED_enuTurnOff>
}
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <main>:


int main(void)
{
	
	PORT_vidInit();
 112:	0e 94 3e 03 	call	0x67c	; 0x67c <PORT_vidInit>
	LCD_VidInit();
 116:	0e 94 82 01 	call	0x304	; 0x304 <LCD_VidInit>
	ADC_enuEnable(ADC_u8_AVCC,ADC_u8_ADC7,ADC_INTERRUPT_ENABLE);
 11a:	80 e4       	ldi	r24, 0x40	; 64
 11c:	67 e0       	ldi	r22, 0x07	; 7
 11e:	48 e0       	ldi	r20, 0x08	; 8
 120:	0e 94 41 03 	call	0x682	; 0x682 <ADC_enuEnable>
	INT_vidEnableGlobalINT();
 124:	0e 94 71 05 	call	0xae2	; 0xae2 <INT_vidEnableGlobalINT>
	ADC_enuGetValue_Asynch(function);
 128:	89 e4       	ldi	r24, 0x49	; 73
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 86 03 	call	0x70c	; 0x70c <ADC_enuGetValue_Asynch>
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	94 e3       	ldi	r25, 0x34	; 52
 134:	ac e0       	ldi	r26, 0x0C	; 12
 136:	81 50       	subi	r24, 0x01	; 1
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	a0 40       	sbci	r26, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x24>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x2e>
 140:	00 00       	nop
	_delay_ms(500);
	while(1)
	{        ADC_enuStartConvertion_Asynchronous();
 142:	0e 94 84 03 	call	0x708	; 0x708 <ADC_enuStartConvertion_Asynchronous>
		    LED_enuTurnOn(DIO_u8_PORTD,0);
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	0e 94 1c 03 	call	0x638	; 0x638 <LED_enuTurnOn>
 152:	f7 cf       	rjmp	.-18     	; 0x142 <main+0x30>

00000154 <LCD_vidSendEnable>:
//------------PRIVATE------------//


static void LCD_vidSendEnable(void)
{
	DIO_enuSetPinValue(LCD_u8_E_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	62 e0       	ldi	r22, 0x02	; 2
 158:	41 e0       	ldi	r20, 0x01	; 1
 15a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <DIO_enuSetPinValue>
 15e:	89 ef       	ldi	r24, 0xF9	; 249
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <LCD_vidSendEnable+0xe>
 166:	00 c0       	rjmp	.+0      	; 0x168 <LCD_vidSendEnable+0x14>
 168:	00 00       	nop
	_delay_ms(1);
	DIO_enuSetPinValue(LCD_u8_E_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	62 e0       	ldi	r22, 0x02	; 2
 16e:	40 e0       	ldi	r20, 0x00	; 0
 170:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <DIO_enuSetPinValue>
}
 174:	08 95       	ret

00000176 <LCD_enuSendCharacter>:
 * Description: send ASCII CODE Character to LCD Microcontroller
 * Argument: Copy_u8Character   (The Desired Character to be Displayed)
 * Return: void
 * */
void LCD_enuSendCharacter(u8 Copy_u8Character)
{
 176:	cf 93       	push	r28
 178:	c8 2f       	mov	r28, r24
#elif defined four_bit_mode


           // *************************** SENDING THE THE HIGH NIBBLE FIRST *******************************/////
       	    		  /* Rs pin ----> high */
       	    		  DIO_enuSetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	41 e0       	ldi	r20, 0x01	; 1
 180:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <DIO_enuSetPinValue>

       	    		  /* RW pin ----> low */
       	    		  DIO_enuSetPinValue(LCD_u8_RW_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	40 e0       	ldi	r20, 0x00	; 0
 18a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <DIO_enuSetPinValue>

                      // Send data //
       	    		  DIO_enuSetPinValue(LCD_u8_D4_PORT, LCD_u8_D4_PIN, (Copy_u8Character >> 4) & 1);
 18e:	4c 2f       	mov	r20, r28
 190:	42 95       	swap	r20
 192:	4f 70       	andi	r20, 0x0F	; 15
 194:	41 70       	andi	r20, 0x01	; 1
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	64 e0       	ldi	r22, 0x04	; 4
 19a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <DIO_enuSetPinValue>
       	    		  DIO_enuSetPinValue(LCD_u8_D5_PORT, LCD_u8_D5_PIN, (Copy_u8Character >> 5) & 1);
 19e:	4c 2f       	mov	r20, r28
 1a0:	42 95       	swap	r20
 1a2:	46 95       	lsr	r20
 1a4:	47 70       	andi	r20, 0x07	; 7
 1a6:	41 70       	andi	r20, 0x01	; 1
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	65 e0       	ldi	r22, 0x05	; 5
 1ac:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <DIO_enuSetPinValue>
       	    		  DIO_enuSetPinValue(LCD_u8_D6_PORT, LCD_u8_D6_PIN, (Copy_u8Character >> 6) & 1);
 1b0:	4c 2f       	mov	r20, r28
 1b2:	42 95       	swap	r20
 1b4:	46 95       	lsr	r20
 1b6:	46 95       	lsr	r20
 1b8:	43 70       	andi	r20, 0x03	; 3
 1ba:	41 70       	andi	r20, 0x01	; 1
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	66 e0       	ldi	r22, 0x06	; 6
 1c0:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <DIO_enuSetPinValue>
       	    		  DIO_enuSetPinValue(LCD_u8_D7_PORT, LCD_u8_D7_PIN, (Copy_u8Character >> 7) & 1);
 1c4:	4c 2f       	mov	r20, r28
 1c6:	44 1f       	adc	r20, r20
 1c8:	44 27       	eor	r20, r20
 1ca:	44 1f       	adc	r20, r20
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	67 e0       	ldi	r22, 0x07	; 7
 1d0:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <DIO_enuSetPinValue>

       	    		  //     	 DIO_enuSetPortValue(DIO_u8_PORTC, Copy_u8Character);
       	    		  // Enable //
       	    		  LCD_vidSendEnable();
 1d4:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_vidSendEnable>
						 
		 // *************************** SENDING THE THE lOW NIBBLE FIRST ********************************//////	 
						  	  /* Rs pin ----> high */
				       DIO_enuSetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	41 e0       	ldi	r20, 0x01	; 1
 1de:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <DIO_enuSetPinValue>
				       
				       /* RW pin ----> low */
				       DIO_enuSetPinValue(LCD_u8_RW_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	61 e0       	ldi	r22, 0x01	; 1
 1e6:	40 e0       	ldi	r20, 0x00	; 0
 1e8:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <DIO_enuSetPinValue>
				       
				       // Send data //
				       DIO_enuSetPinValue(LCD_u8_D4_PORT, LCD_u8_D4_PIN, (Copy_u8Character >> 0) & 1);
 1ec:	4c 2f       	mov	r20, r28
 1ee:	41 70       	andi	r20, 0x01	; 1
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	64 e0       	ldi	r22, 0x04	; 4
 1f4:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <DIO_enuSetPinValue>
				       DIO_enuSetPinValue(LCD_u8_D5_PORT, LCD_u8_D5_PIN, (Copy_u8Character >> 1) & 1);
 1f8:	4c 2f       	mov	r20, r28
 1fa:	46 95       	lsr	r20
 1fc:	41 70       	andi	r20, 0x01	; 1
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	65 e0       	ldi	r22, 0x05	; 5
 202:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <DIO_enuSetPinValue>
				       DIO_enuSetPinValue(LCD_u8_D6_PORT, LCD_u8_D6_PIN, (Copy_u8Character >> 2) & 1);
 206:	4c 2f       	mov	r20, r28
 208:	46 95       	lsr	r20
 20a:	46 95       	lsr	r20
 20c:	41 70       	andi	r20, 0x01	; 1
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	66 e0       	ldi	r22, 0x06	; 6
 212:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <DIO_enuSetPinValue>
				       DIO_enuSetPinValue(LCD_u8_D7_PORT, LCD_u8_D7_PIN, (Copy_u8Character >> 3) & 1);
 216:	c6 95       	lsr	r28
 218:	c6 95       	lsr	r28
 21a:	c6 95       	lsr	r28
 21c:	4c 2f       	mov	r20, r28
 21e:	41 70       	andi	r20, 0x01	; 1
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	67 e0       	ldi	r22, 0x07	; 7
 224:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <DIO_enuSetPinValue>
				       
				       
				       //     	 DIO_enuSetPortValue(DIO_u8_PORTC, Copy_u8Character);
				       // Enable //
				         LCD_vidSendEnable();	
 228:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_vidSendEnable>
 22c:	87 eb       	ldi	r24, 0xB7	; 183
 22e:	9b e0       	ldi	r25, 0x0B	; 11
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <LCD_enuSendCharacter+0xba>
 234:	00 c0       	rjmp	.+0      	; 0x236 <LCD_enuSendCharacter+0xc0>
 236:	00 00       	nop
						 _delay_ms(12);
						
	#endif					  
						 
}
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <LCD_enuSendInstruction>:
 * Description: send instruction to LCD Microcontroller
 * Argument: Copy_u8Instruction   (The Desired Instruction to be Executed)
 * Return: Error Status >>>>> LCD_OK , LCD_NOK
 * */
LCD_enutErrorStatus LCD_enuSendInstruction(u8 Copy_u8Instruction)
{
 23c:	cf 93       	push	r28
 23e:	c8 2f       	mov	r28, r24
			  _delay_ms(4);
		#elif defined four_bit_mode	  
		
 // *************************** SENDING THE THE HIGH NIBBLE FIRST ********************************//////	 
			  /* Rs pin ----> low */
			  DIO_enuSetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	40 e0       	ldi	r20, 0x00	; 0
 246:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <DIO_enuSetPinValue>

			  /* RW pin ----> low */
			  DIO_enuSetPinValue(LCD_u8_RW_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	61 e0       	ldi	r22, 0x01	; 1
 24e:	40 e0       	ldi	r20, 0x00	; 0
 250:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <DIO_enuSetPinValue>

			  DIO_enuSetPinValue(LCD_u8_D4_PORT, LCD_u8_D4_PIN, (Copy_u8Instruction >> 4) & 1);
 254:	4c 2f       	mov	r20, r28
 256:	42 95       	swap	r20
 258:	4f 70       	andi	r20, 0x0F	; 15
 25a:	41 70       	andi	r20, 0x01	; 1
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	64 e0       	ldi	r22, 0x04	; 4
 260:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <DIO_enuSetPinValue>
			  DIO_enuSetPinValue(LCD_u8_D5_PORT, LCD_u8_D5_PIN, (Copy_u8Instruction >> 5) & 1);
 264:	4c 2f       	mov	r20, r28
 266:	42 95       	swap	r20
 268:	46 95       	lsr	r20
 26a:	47 70       	andi	r20, 0x07	; 7
 26c:	41 70       	andi	r20, 0x01	; 1
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	65 e0       	ldi	r22, 0x05	; 5
 272:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <DIO_enuSetPinValue>
			  DIO_enuSetPinValue(LCD_u8_D6_PORT, LCD_u8_D6_PIN, (Copy_u8Instruction >> 6) & 1);
 276:	4c 2f       	mov	r20, r28
 278:	42 95       	swap	r20
 27a:	46 95       	lsr	r20
 27c:	46 95       	lsr	r20
 27e:	43 70       	andi	r20, 0x03	; 3
 280:	41 70       	andi	r20, 0x01	; 1
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	66 e0       	ldi	r22, 0x06	; 6
 286:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <DIO_enuSetPinValue>
			  DIO_enuSetPinValue(LCD_u8_D7_PORT, LCD_u8_D7_PIN, (Copy_u8Instruction >> 7) & 1);
 28a:	4c 2f       	mov	r20, r28
 28c:	44 1f       	adc	r20, r20
 28e:	44 27       	eor	r20, r20
 290:	44 1f       	adc	r20, r20
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	67 e0       	ldi	r22, 0x07	; 7
 296:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <DIO_enuSetPinValue>

			  // Enable //
			  LCD_vidSendEnable();
 29a:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_vidSendEnable>
			  
    // *************************** SENDING THE THE lOW NIBBLE FIRST ********************************//////	 
			  	  /* Rs pin ----> low */
			  	  DIO_enuSetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <DIO_enuSetPinValue>

			  	  /* RW pin ----> low */
			  	  DIO_enuSetPinValue(LCD_u8_RW_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	40 e0       	ldi	r20, 0x00	; 0
 2ae:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <DIO_enuSetPinValue>

			  	  // Send instructions //
			  	  DIO_enuSetPinValue(LCD_u8_D4_PORT, LCD_u8_D4_PIN, (Copy_u8Instruction >> 0) & 1);
 2b2:	4c 2f       	mov	r20, r28
 2b4:	41 70       	andi	r20, 0x01	; 1
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	64 e0       	ldi	r22, 0x04	; 4
 2ba:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <DIO_enuSetPinValue>
			  	  DIO_enuSetPinValue(LCD_u8_D5_PORT, LCD_u8_D5_PIN, (Copy_u8Instruction >> 1) & 1);
 2be:	4c 2f       	mov	r20, r28
 2c0:	46 95       	lsr	r20
 2c2:	41 70       	andi	r20, 0x01	; 1
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	65 e0       	ldi	r22, 0x05	; 5
 2c8:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <DIO_enuSetPinValue>
			  	  DIO_enuSetPinValue(LCD_u8_D6_PORT, LCD_u8_D6_PIN, (Copy_u8Instruction >> 2) & 1);
 2cc:	4c 2f       	mov	r20, r28
 2ce:	46 95       	lsr	r20
 2d0:	46 95       	lsr	r20
 2d2:	41 70       	andi	r20, 0x01	; 1
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	66 e0       	ldi	r22, 0x06	; 6
 2d8:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <DIO_enuSetPinValue>
			  	  DIO_enuSetPinValue(LCD_u8_D7_PORT, LCD_u8_D7_PIN, (Copy_u8Instruction >> 3) & 1);
 2dc:	c6 95       	lsr	r28
 2de:	c6 95       	lsr	r28
 2e0:	c6 95       	lsr	r28
 2e2:	4c 2f       	mov	r20, r28
 2e4:	41 70       	andi	r20, 0x01	; 1
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	67 e0       	ldi	r22, 0x07	; 7
 2ea:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <DIO_enuSetPinValue>

			  	  // Enable //
			  	  LCD_vidSendEnable();
 2ee:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_vidSendEnable>
 2f2:	87 eb       	ldi	r24, 0xB7	; 183
 2f4:	9b e0       	ldi	r25, 0x0B	; 11
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <LCD_enuSendInstruction+0xba>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <LCD_enuSendInstruction+0xc0>
 2fc:	00 00       	nop
				 _delay_ms(12);
	  }

#endif
     return Local_enuErrorStatus;
}
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <LCD_VidInit>:
 304:	8f e3       	ldi	r24, 0x3F	; 63
 306:	9f e1       	ldi	r25, 0x1F	; 31
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <LCD_VidInit+0x4>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <LCD_VidInit+0xa>
 30e:	00 00       	nop
 
 #elif defined four_bit_mode 
 	_delay_ms(32);


   LCD_enuSendInstruction(0x02);
 310:	82 e0       	ldi	r24, 0x02	; 2
 312:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_enuSendInstruction>

 	/* function set */
 	LCD_enuSendInstruction(LCD_u8_FUNCTION_SET);
 316:	88 e2       	ldi	r24, 0x28	; 40
 318:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_enuSendInstruction>
 31c:	89 ef       	ldi	r24, 0xF9	; 249
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <LCD_VidInit+0x1c>
 324:	00 c0       	rjmp	.+0      	; 0x326 <LCD_VidInit+0x22>
 326:	00 00       	nop

 	_delay_ms(1);
 	/* display control */
 	LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURSOR_OFF);
 328:	8c e0       	ldi	r24, 0x0C	; 12
 32a:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_enuSendInstruction>
 32e:	89 ef       	ldi	r24, 0xF9	; 249
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <LCD_VidInit+0x2e>
 336:	00 c0       	rjmp	.+0      	; 0x338 <LCD_VidInit+0x34>
 338:	00 00       	nop

 	_delay_ms(1);
 	/* display control */
 	LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_enuSendInstruction>
 340:	83 ef       	ldi	r24, 0xF3	; 243
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <LCD_VidInit+0x40>
 348:	00 c0       	rjmp	.+0      	; 0x34a <LCD_VidInit+0x46>
 34a:	00 00       	nop
 //	LCD_enuSendInstruction(LCD_u8_RETURN_HOME);

 	_delay_ms(2);
	 
 	/* entry mode */
 	LCD_enuSendInstruction(LCD_u8_CURSOR_INC_SHIFT_OFF);
 34c:	86 e0       	ldi	r24, 0x06	; 6
 34e:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_enuSendInstruction>
 352:	85 ed       	ldi	r24, 0xD5	; 213
 354:	96 e0       	ldi	r25, 0x06	; 6
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <LCD_VidInit+0x52>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <LCD_VidInit+0x58>
 35c:	00 00       	nop
 	_delay_ms(7);

 #endif
}
 35e:	08 95       	ret

00000360 <LCD_enuGoTo>:

LCD_enutErrorStatus LCD_enuGoTo(u8 Copy_u8Row , u8 Copy_u8Col)
{
	LCD_enutErrorStatus  Local_enuErrorStatus = LCD_OK;

	 if(Copy_u8Row >LCD_u8_ROW1 ||  Copy_u8Col>LCD_u8_COL15)
 360:	82 30       	cpi	r24, 0x02	; 2
 362:	98 f4       	brcc	.+38     	; 0x38a <LCD_enuGoTo+0x2a>
 364:	60 31       	cpi	r22, 0x10	; 16
 366:	98 f4       	brcc	.+38     	; 0x38e <LCD_enuGoTo+0x2e>
	 {
		 Local_enuErrorStatus = LCD_NOK;
	 }
	 else
	 {
		 switch (Copy_u8Row)
 368:	88 23       	and	r24, r24
 36a:	19 f0       	breq	.+6      	; 0x372 <LCD_enuGoTo+0x12>
 36c:	81 30       	cpi	r24, 0x01	; 1
 36e:	89 f4       	brne	.+34     	; 0x392 <LCD_enuGoTo+0x32>
 370:	06 c0       	rjmp	.+12     	; 0x37e <LCD_enuGoTo+0x1e>
		 {
		     case LCD_u8_ROW0:
		    	                  LCD_enuSendInstruction(LCD_u8_FIRST_DDRAM_ADDRESS + Copy_u8Col);
 372:	86 2f       	mov	r24, r22
 374:	80 58       	subi	r24, 0x80	; 128
 376:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_enuSendInstruction>



LCD_enutErrorStatus LCD_enuGoTo(u8 Copy_u8Row , u8 Copy_u8Col)
{
	LCD_enutErrorStatus  Local_enuErrorStatus = LCD_OK;
 37a:	80 e0       	ldi	r24, 0x00	; 0
	 {
		 switch (Copy_u8Row)
		 {
		     case LCD_u8_ROW0:
		    	                  LCD_enuSendInstruction(LCD_u8_FIRST_DDRAM_ADDRESS + Copy_u8Col);
		    	                    break;
 37c:	08 95       	ret
		     case LCD_u8_ROW1:
		    	                  LCD_enuSendInstruction(LCD_u8_FIRST_DDRAM_ADDRESS + (Copy_u8Col+0x40));
 37e:	86 2f       	mov	r24, r22
 380:	80 54       	subi	r24, 0x40	; 64
 382:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_enuSendInstruction>



LCD_enutErrorStatus LCD_enuGoTo(u8 Copy_u8Row , u8 Copy_u8Col)
{
	LCD_enutErrorStatus  Local_enuErrorStatus = LCD_OK;
 386:	80 e0       	ldi	r24, 0x00	; 0
		     case LCD_u8_ROW0:
		    	                  LCD_enuSendInstruction(LCD_u8_FIRST_DDRAM_ADDRESS + Copy_u8Col);
		    	                    break;
		     case LCD_u8_ROW1:
		    	                  LCD_enuSendInstruction(LCD_u8_FIRST_DDRAM_ADDRESS + (Copy_u8Col+0x40));
		    	                    break;
 388:	08 95       	ret
{
	LCD_enutErrorStatus  Local_enuErrorStatus = LCD_OK;

	 if(Copy_u8Row >LCD_u8_ROW1 ||  Copy_u8Col>LCD_u8_COL15)
	 {
		 Local_enuErrorStatus = LCD_NOK;
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	08 95       	ret
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	08 95       	ret



LCD_enutErrorStatus LCD_enuGoTo(u8 Copy_u8Row , u8 Copy_u8Col)
{
	LCD_enutErrorStatus  Local_enuErrorStatus = LCD_OK;
 392:	80 e0       	ldi	r24, 0x00	; 0
		    	                    break;
		 }

	 }
    return Local_enuErrorStatus;
}
 394:	08 95       	ret

00000396 <LCD_enuSendString>:


LCD_enutErrorStatus	LCD_enuSendString(u8* Add_pu8String)
{
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	ec 01       	movw	r28, r24
	LCD_enutErrorStatus Local_enuErrorStatus = LCD_OK;

		if(Add_pu8String == NULL)
 39c:	00 97       	sbiw	r24, 0x00	; 0
 39e:	51 f0       	breq	.+20     	; 0x3b4 <LCD_enuSendString+0x1e>
		{
			Local_enuErrorStatus = LCD_NOK;
		}
		else
		{
                  while(*Add_pu8String!='\0')
 3a0:	88 81       	ld	r24, Y
 3a2:	88 23       	and	r24, r24
 3a4:	49 f0       	breq	.+18     	; 0x3b8 <LCD_enuSendString+0x22>
	 }
    return Local_enuErrorStatus;
}


LCD_enutErrorStatus	LCD_enuSendString(u8* Add_pu8String)
 3a6:	21 96       	adiw	r28, 0x01	; 1
		}
		else
		{
                  while(*Add_pu8String!='\0')
                     {
                	  LCD_enuSendCharacter(*Add_pu8String);
 3a8:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_enuSendCharacter>
		{
			Local_enuErrorStatus = LCD_NOK;
		}
		else
		{
                  while(*Add_pu8String!='\0')
 3ac:	89 91       	ld	r24, Y+
 3ae:	88 23       	and	r24, r24
 3b0:	d9 f7       	brne	.-10     	; 0x3a8 <LCD_enuSendString+0x12>
 3b2:	03 c0       	rjmp	.+6      	; 0x3ba <LCD_enuSendString+0x24>
{
	LCD_enutErrorStatus Local_enuErrorStatus = LCD_OK;

		if(Add_pu8String == NULL)
		{
			Local_enuErrorStatus = LCD_NOK;
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	01 c0       	rjmp	.+2      	; 0x3ba <LCD_enuSendString+0x24>
}


LCD_enutErrorStatus	LCD_enuSendString(u8* Add_pu8String)
{
	LCD_enutErrorStatus Local_enuErrorStatus = LCD_OK;
 3b8:	80 e0       	ldi	r24, 0x00	; 0
                	  LCD_enuSendCharacter(*Add_pu8String);
                    	   Add_pu8String++;
                    }
		}
		return Local_enuErrorStatus;
}
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	08 95       	ret

000003c0 <LCD_enuSendCustomCharacter>:


LCD_enutErrorStatus LCD_enuSendCustomCharacter(u8 *Add_u8Pattern,u8 Copy_u8NumOfBlock , u8 Copy_u8Row , u8 Copy_u8Col)
{
 3c0:	df 92       	push	r13
 3c2:	ef 92       	push	r14
 3c4:	ff 92       	push	r15
 3c6:	0f 93       	push	r16
 3c8:	1f 93       	push	r17
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	ec 01       	movw	r28, r24
 3d0:	f6 2e       	mov	r15, r22
 3d2:	e4 2e       	mov	r14, r20
 3d4:	d2 2e       	mov	r13, r18
	LCD_enutErrorStatus Local_enuErrorStatus = LCD_OK;
     u8 Local_u8Iterator=8;
	if(Add_u8Pattern == NULL || Copy_u8NumOfBlock > 7 || Copy_u8Row > LCD_u8_ROW1 || Copy_u8Col > LCD_u8_COL15)
 3d6:	00 97       	sbiw	r24, 0x00	; 0
 3d8:	41 f1       	breq	.+80     	; 0x42a <LCD_enuSendCustomCharacter+0x6a>
 3da:	87 e0       	ldi	r24, 0x07	; 7
 3dc:	86 17       	cp	r24, r22
 3de:	38 f1       	brcs	.+78     	; 0x42e <LCD_enuSendCustomCharacter+0x6e>
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	94 17       	cp	r25, r20
 3e4:	30 f1       	brcs	.+76     	; 0x432 <LCD_enuSendCustomCharacter+0x72>
 3e6:	8f e0       	ldi	r24, 0x0F	; 15
 3e8:	82 17       	cp	r24, r18
 3ea:	28 f1       	brcs	.+74     	; 0x436 <LCD_enuSendCustomCharacter+0x76>
		Local_enuErrorStatus=LCD_NOK;
	}

	else
	{
	      LCD_enuSendInstruction(LCD_u8_FIRST_CGRAM_ADDRESS + (Copy_u8NumOfBlock*8)); // the block is 8 byte so we jumb a block not a byte
 3ec:	86 2f       	mov	r24, r22
 3ee:	88 0f       	add	r24, r24
 3f0:	88 0f       	add	r24, r24
 3f2:	88 0f       	add	r24, r24
 3f4:	80 5c       	subi	r24, 0xC0	; 192
 3f6:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_enuSendInstruction>
		}
		return Local_enuErrorStatus;
}


LCD_enutErrorStatus LCD_enuSendCustomCharacter(u8 *Add_u8Pattern,u8 Copy_u8NumOfBlock , u8 Copy_u8Row , u8 Copy_u8Col)
 3fa:	8e 01       	movw	r16, r28
 3fc:	08 5f       	subi	r16, 0xF8	; 248
 3fe:	1f 4f       	sbci	r17, 0xFF	; 255
	else
	{
	      LCD_enuSendInstruction(LCD_u8_FIRST_CGRAM_ADDRESS + (Copy_u8NumOfBlock*8)); // the block is 8 byte so we jumb a block not a byte
	    while(Local_u8Iterator--)
		  {
	    	LCD_enuSendCharacter (*Add_u8Pattern);
 400:	89 91       	ld	r24, Y+
 402:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_enuSendCharacter>
 406:	81 ee       	ldi	r24, 0xE1	; 225
 408:	94 e0       	ldi	r25, 0x04	; 4
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	f1 f7       	brne	.-4      	; 0x40a <LCD_enuSendCustomCharacter+0x4a>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <LCD_enuSendCustomCharacter+0x50>
 410:	00 00       	nop
	}

	else
	{
	      LCD_enuSendInstruction(LCD_u8_FIRST_CGRAM_ADDRESS + (Copy_u8NumOfBlock*8)); // the block is 8 byte so we jumb a block not a byte
	    while(Local_u8Iterator--)
 412:	c0 17       	cp	r28, r16
 414:	d1 07       	cpc	r29, r17
 416:	a1 f7       	brne	.-24     	; 0x400 <LCD_enuSendCustomCharacter+0x40>
	    	LCD_enuSendCharacter (*Add_u8Pattern);
		    Add_u8Pattern++;
		    _delay_ms(5);
	      }

	    LCD_enuGoTo(Copy_u8Row,Copy_u8Col);
 418:	8e 2d       	mov	r24, r14
 41a:	6d 2d       	mov	r22, r13
 41c:	0e 94 b0 01 	call	0x360	; 0x360 <LCD_enuGoTo>
	    LCD_enuSendCharacter(Copy_u8NumOfBlock);
 420:	8f 2d       	mov	r24, r15
 422:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_enuSendCharacter>
}


LCD_enutErrorStatus LCD_enuSendCustomCharacter(u8 *Add_u8Pattern,u8 Copy_u8NumOfBlock , u8 Copy_u8Row , u8 Copy_u8Col)
{
	LCD_enutErrorStatus Local_enuErrorStatus = LCD_OK;
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	07 c0       	rjmp	.+14     	; 0x438 <LCD_enuSendCustomCharacter+0x78>
     u8 Local_u8Iterator=8;
	if(Add_u8Pattern == NULL || Copy_u8NumOfBlock > 7 || Copy_u8Row > LCD_u8_ROW1 || Copy_u8Col > LCD_u8_COL15)
	{
		Local_enuErrorStatus=LCD_NOK;
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	05 c0       	rjmp	.+10     	; 0x438 <LCD_enuSendCustomCharacter+0x78>
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	03 c0       	rjmp	.+6      	; 0x438 <LCD_enuSendCustomCharacter+0x78>
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	01 c0       	rjmp	.+2      	; 0x438 <LCD_enuSendCustomCharacter+0x78>
 436:	81 e0       	ldi	r24, 0x01	; 1
	    LCD_enuGoTo(Copy_u8Row,Copy_u8Col);
	    LCD_enuSendCharacter(Copy_u8NumOfBlock);
	}

	return Local_enuErrorStatus;
}
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	1f 91       	pop	r17
 43e:	0f 91       	pop	r16
 440:	ff 90       	pop	r15
 442:	ef 90       	pop	r14
 444:	df 90       	pop	r13
 446:	08 95       	ret

00000448 <LCD_enuSendNumber>:




void LCD_enuSendNumber(u32 Copy_u32Number)
{
 448:	8f 92       	push	r8
 44a:	9f 92       	push	r9
 44c:	af 92       	push	r10
 44e:	bf 92       	push	r11
 450:	ff 92       	push	r15
 452:	0f 93       	push	r16
 454:	1f 93       	push	r17
 456:	cf 93       	push	r28
 458:	df 93       	push	r29
 45a:	cd b7       	in	r28, 0x3d	; 61
 45c:	de b7       	in	r29, 0x3e	; 62
 45e:	2f 97       	sbiw	r28, 0x0f	; 15
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	f8 94       	cli
 464:	de bf       	out	0x3e, r29	; 62
 466:	0f be       	out	0x3f, r0	; 63
 468:	cd bf       	out	0x3d, r28	; 61
 46a:	8b 01       	movw	r16, r22
 46c:	9c 01       	movw	r18, r24

    u8 Local_u8Reminder=0;
    u8 LCD_au8Reminder[15];
    u8 Local_u8Index=0;
	s8 Local_s8Iterator;
	if(Copy_u32Number == 0)
 46e:	61 15       	cp	r22, r1
 470:	71 05       	cpc	r23, r1
 472:	81 05       	cpc	r24, r1
 474:	91 05       	cpc	r25, r1
 476:	21 f4       	brne	.+8      	; 0x480 <LCD_enuSendNumber+0x38>
	{
		LCD_enuSendCharacter('0');
 478:	80 e3       	ldi	r24, 0x30	; 48
 47a:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_enuSendCharacter>
 47e:	33 c0       	rjmp	.+102    	; 0x4e6 <LCD_enuSendNumber+0x9e>

    u8 Local_u8Reminder=0;
    u8 LCD_au8Reminder[15];
    u8 Local_u8Index=0;
	s8 Local_s8Iterator;
	if(Copy_u32Number == 0)
 480:	ff 24       	eor	r15, r15
	}
	else
	{
          while(Copy_u32Number!=0)
          {
	          Local_u8Reminder=Copy_u32Number%10;   //    1
 482:	0f 2e       	mov	r0, r31
 484:	fa e0       	ldi	r31, 0x0A	; 10
 486:	8f 2e       	mov	r8, r31
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	9f 2e       	mov	r9, r31
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	af 2e       	mov	r10, r31
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	bf 2e       	mov	r11, r31
 494:	f0 2d       	mov	r31, r0
	          Copy_u32Number=Copy_u32Number/10;   //1
 496:	c9 01       	movw	r24, r18
 498:	b8 01       	movw	r22, r16
 49a:	a5 01       	movw	r20, r10
 49c:	94 01       	movw	r18, r8
 49e:	0e 94 a8 06 	call	0xd50	; 0xd50 <__udivmodsi4>
 4a2:	89 01       	movw	r16, r18
 4a4:	9a 01       	movw	r18, r20
	          LCD_au8Reminder[Local_u8Index]=Local_u8Reminder;
 4a6:	e1 e0       	ldi	r30, 0x01	; 1
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	ec 0f       	add	r30, r28
 4ac:	fd 1f       	adc	r31, r29
 4ae:	ef 0d       	add	r30, r15
 4b0:	f1 1d       	adc	r31, r1
 4b2:	60 83       	st	Z, r22
	          Local_u8Index++;
 4b4:	f3 94       	inc	r15
	{
		LCD_enuSendCharacter('0');
	}
	else
	{
          while(Copy_u32Number!=0)
 4b6:	01 15       	cp	r16, r1
 4b8:	11 05       	cpc	r17, r1
 4ba:	21 05       	cpc	r18, r1
 4bc:	31 05       	cpc	r19, r1
 4be:	59 f7       	brne	.-42     	; 0x496 <LCD_enuSendNumber+0x4e>
	          Copy_u32Number=Copy_u32Number/10;   //1
	          LCD_au8Reminder[Local_u8Index]=Local_u8Reminder;
	          Local_u8Index++;
          }
          
          for (Local_s8Iterator=Local_u8Index-1 ; Local_s8Iterator>=0; --Local_s8Iterator)
 4c0:	1f 2d       	mov	r17, r15
 4c2:	11 50       	subi	r17, 0x01	; 1
 4c4:	82 f0       	brmi	.+32     	; 0x4e6 <LCD_enuSendNumber+0x9e>
                 LCD_enuSendCharacter(LCD_au8Reminder[Local_s8Iterator]+48);
 4c6:	e1 2f       	mov	r30, r17
 4c8:	ff 27       	eor	r31, r31
 4ca:	e7 fd       	sbrc	r30, 7
 4cc:	f0 95       	com	r31
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	8c 0f       	add	r24, r28
 4d4:	9d 1f       	adc	r25, r29
 4d6:	e8 0f       	add	r30, r24
 4d8:	f9 1f       	adc	r31, r25
 4da:	80 81       	ld	r24, Z
 4dc:	80 5d       	subi	r24, 0xD0	; 208
 4de:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_enuSendCharacter>
	          Copy_u32Number=Copy_u32Number/10;   //1
	          LCD_au8Reminder[Local_u8Index]=Local_u8Reminder;
	          Local_u8Index++;
          }
          
          for (Local_s8Iterator=Local_u8Index-1 ; Local_s8Iterator>=0; --Local_s8Iterator)
 4e2:	11 50       	subi	r17, 0x01	; 1
 4e4:	82 f7       	brpl	.-32     	; 0x4c6 <LCD_enuSendNumber+0x7e>
                 LCD_enuSendCharacter(LCD_au8Reminder[Local_s8Iterator]+48);
	}		  

}
 4e6:	2f 96       	adiw	r28, 0x0f	; 15
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	f8 94       	cli
 4ec:	de bf       	out	0x3e, r29	; 62
 4ee:	0f be       	out	0x3f, r0	; 63
 4f0:	cd bf       	out	0x3d, r28	; 61
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	1f 91       	pop	r17
 4f8:	0f 91       	pop	r16
 4fa:	ff 90       	pop	r15
 4fc:	bf 90       	pop	r11
 4fe:	af 90       	pop	r10
 500:	9f 90       	pop	r9
 502:	8f 90       	pop	r8
 504:	08 95       	ret

00000506 <LCD_vidPrintMyName>:


void LCD_vidPrintMyName()
{
 506:	df 92       	push	r13
 508:	ef 92       	push	r14
 50a:	ff 92       	push	r15
 50c:	0f 93       	push	r16
 50e:	1f 93       	push	r17
 510:	cf 93       	push	r28
 512:	df 93       	push	r29
		 u8 Local_u8Col=0;
		 u8 Local_u8LastRow=0;
		 u8 Local_u8LastCol =0;
		 u8 Local_u8Flag=0;

         LCD_enuSendCharacter('S');
 514:	83 e5       	ldi	r24, 0x53	; 83
 516:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_enuSendCharacter>
		 LCD_enuGoTo(1,1);
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	61 e0       	ldi	r22, 0x01	; 1
 51e:	0e 94 b0 01 	call	0x360	; 0x360 <LCD_enuGoTo>
		 LCD_enuSendCharacter('E');
 522:	85 e4       	ldi	r24, 0x45	; 69
 524:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_enuSendCharacter>
		 LCD_enuGoTo(0,2);
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	62 e0       	ldi	r22, 0x02	; 2
 52c:	0e 94 b0 01 	call	0x360	; 0x360 <LCD_enuGoTo>
		 LCD_enuSendCharacter('I');
 530:	89 e4       	ldi	r24, 0x49	; 73
 532:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_enuSendCharacter>
		 LCD_enuGoTo(1,3);
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	63 e0       	ldi	r22, 0x03	; 3
 53a:	0e 94 b0 01 	call	0x360	; 0x360 <LCD_enuGoTo>
		 LCD_enuSendCharacter('F');
 53e:	86 e4       	ldi	r24, 0x46	; 70
 540:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_enuSendCharacter>
 544:	8f e4       	ldi	r24, 0x4F	; 79
 546:	93 ec       	ldi	r25, 0xC3	; 195
 548:	01 97       	sbiw	r24, 0x01	; 1
 54a:	f1 f7       	brne	.-4      	; 0x548 <LCD_vidPrintMyName+0x42>
 54c:	00 c0       	rjmp	.+0      	; 0x54e <LCD_vidPrintMyName+0x48>
 54e:	00 00       	nop
	     _delay_ms(200);
	     LCD_enuSendInstruction(LCD_u8_SHIFT_CURSOR_LEFT);
 550:	80 e1       	ldi	r24, 0x10	; 16
 552:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_enuSendInstruction>
{
	u8 Local_u8Row=0;
		 u8 Local_u8Col=0;
		 u8 Local_u8LastRow=0;
		 u8 Local_u8LastCol =0;
		 u8 Local_u8Flag=0;
 556:	dd 24       	eor	r13, r13
		 LCD_enuSendCharacter('I');
		 LCD_enuGoTo(1,3);
		 LCD_enuSendCharacter('F');
	     _delay_ms(200);
	     LCD_enuSendInstruction(LCD_u8_SHIFT_CURSOR_LEFT);
	     Local_u8Col=4;
 558:	c4 e0       	ldi	r28, 0x04	; 4
	    Local_u8Row=0;
 55a:	d0 e0       	ldi	r29, 0x00	; 0
			{
				LCD_enuGoTo(Local_u8Row,Local_u8Col);
				Local_u8Flag=1;
			}                   // 0 ,4
			else
			{     Local_u8Row=Local_u8Row^1;
 55c:	ee 24       	eor	r14, r14
 55e:	e3 94       	inc	r14
	    Local_u8Row=0;

while (Local_u8Col<19)
	   {

		     LCD_enuSendCharacter(0);
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_enuSendCharacter>

			if(Local_u8Flag==0)
 566:	dd 20       	and	r13, r13
 568:	31 f4       	brne	.+12     	; 0x576 <LCD_vidPrintMyName+0x70>
			{
				LCD_enuGoTo(Local_u8Row,Local_u8Col);
 56a:	8d 2f       	mov	r24, r29
 56c:	6c 2f       	mov	r22, r28
 56e:	0e 94 b0 01 	call	0x360	; 0x360 <LCD_enuGoTo>
				Local_u8Flag=1;
 572:	de 2c       	mov	r13, r14
 574:	06 c0       	rjmp	.+12     	; 0x582 <LCD_vidPrintMyName+0x7c>
			}                   // 0 ,4
			else
			{     Local_u8Row=Local_u8Row^1;
 576:	de 25       	eor	r29, r14
			Local_u8Col++;
 578:	cf 5f       	subi	r28, 0xFF	; 255
				LCD_enuGoTo(Local_u8Row,Local_u8Col);
 57a:	8d 2f       	mov	r24, r29
 57c:	6c 2f       	mov	r22, r28
 57e:	0e 94 b0 01 	call	0x360	; 0x360 <LCD_enuGoTo>
			}
			Local_u8LastRow=Local_u8Row;
			Local_u8LastCol=Local_u8Col;
			 LCD_enuSendCharacter('F');
 582:	86 e4       	ldi	r24, 0x46	; 70
 584:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_enuSendCharacter>
 588:	87 ea       	ldi	r24, 0xA7	; 167
 58a:	91 e6       	ldi	r25, 0x61	; 97
 58c:	01 97       	sbiw	r24, 0x01	; 1
 58e:	f1 f7       	brne	.-4      	; 0x58c <LCD_vidPrintMyName+0x86>
 590:	00 c0       	rjmp	.+0      	; 0x592 <LCD_vidPrintMyName+0x8c>
 592:	00 00       	nop
			  _delay_ms(100);

			  Local_u8Col-=2;
 594:	0f 2e       	mov	r0, r31
 596:	fe ef       	ldi	r31, 0xFE	; 254
 598:	ff 2e       	mov	r15, r31
 59a:	f0 2d       	mov	r31, r0
 59c:	fc 0e       	add	r15, r28
		     LCD_enuGoTo(Local_u8Row,Local_u8Col);  // 0,2
 59e:	8d 2f       	mov	r24, r29
 5a0:	6f 2d       	mov	r22, r15
 5a2:	0e 94 b0 01 	call	0x360	; 0x360 <LCD_enuGoTo>
		     LCD_enuSendCharacter(0);
 5a6:	80 e0       	ldi	r24, 0x00	; 0
 5a8:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_enuSendCharacter>
		     Local_u8Row=Local_u8Row^1;
 5ac:	1d 2f       	mov	r17, r29
 5ae:	1e 25       	eor	r17, r14
		     Local_u8Col++;
 5b0:	6c 2f       	mov	r22, r28
 5b2:	61 50       	subi	r22, 0x01	; 1
		     LCD_enuGoTo(Local_u8Row,Local_u8Col); //1,3
 5b4:	81 2f       	mov	r24, r17
 5b6:	0e 94 b0 01 	call	0x360	; 0x360 <LCD_enuGoTo>
		     LCD_enuSendCharacter('I');
 5ba:	89 e4       	ldi	r24, 0x49	; 73
 5bc:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_enuSendCharacter>
 5c0:	87 ea       	ldi	r24, 0xA7	; 167
 5c2:	91 e6       	ldi	r25, 0x61	; 97
 5c4:	01 97       	sbiw	r24, 0x01	; 1
 5c6:	f1 f7       	brne	.-4      	; 0x5c4 <LCD_vidPrintMyName+0xbe>
 5c8:	00 c0       	rjmp	.+0      	; 0x5ca <LCD_vidPrintMyName+0xc4>
 5ca:	00 00       	nop
		     _delay_ms(100);

		     Local_u8Col-=2;
 5cc:	0c 2f       	mov	r16, r28
 5ce:	03 50       	subi	r16, 0x03	; 3
		     LCD_enuGoTo(Local_u8Row,Local_u8Col); // 1 1
 5d0:	81 2f       	mov	r24, r17
 5d2:	60 2f       	mov	r22, r16
 5d4:	0e 94 b0 01 	call	0x360	; 0x360 <LCD_enuGoTo>
		     LCD_enuSendCharacter(0);
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_enuSendCharacter>
		     Local_u8Row=Local_u8Row^1;
		     Local_u8Col++;
		     LCD_enuGoTo(Local_u8Row,Local_u8Col); // 0 2
 5de:	8d 2f       	mov	r24, r29
 5e0:	6f 2d       	mov	r22, r15
 5e2:	0e 94 b0 01 	call	0x360	; 0x360 <LCD_enuGoTo>
		     LCD_enuSendCharacter('E');
 5e6:	85 e4       	ldi	r24, 0x45	; 69
 5e8:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_enuSendCharacter>
 5ec:	87 ea       	ldi	r24, 0xA7	; 167
 5ee:	91 e6       	ldi	r25, 0x61	; 97
 5f0:	01 97       	sbiw	r24, 0x01	; 1
 5f2:	f1 f7       	brne	.-4      	; 0x5f0 <LCD_vidPrintMyName+0xea>
 5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <LCD_vidPrintMyName+0xf0>
 5f6:	00 00       	nop
		     _delay_ms(100);

		     Local_u8Col-=2;
 5f8:	6c 2f       	mov	r22, r28
 5fa:	64 50       	subi	r22, 0x04	; 4
		     LCD_enuGoTo(Local_u8Row,Local_u8Col); // 0 0
 5fc:	8d 2f       	mov	r24, r29
 5fe:	0e 94 b0 01 	call	0x360	; 0x360 <LCD_enuGoTo>
		     LCD_enuSendCharacter(0);
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_enuSendCharacter>
		     Local_u8Row=Local_u8Row^1;
		     Local_u8Col++;
		     LCD_enuGoTo(Local_u8Row,Local_u8Col); // 1 1
 608:	81 2f       	mov	r24, r17
 60a:	60 2f       	mov	r22, r16
 60c:	0e 94 b0 01 	call	0x360	; 0x360 <LCD_enuGoTo>
		     LCD_enuSendCharacter('S');
 610:	83 e5       	ldi	r24, 0x53	; 83
 612:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_enuSendCharacter>
 616:	87 ea       	ldi	r24, 0xA7	; 167
 618:	91 e6       	ldi	r25, 0x61	; 97
 61a:	01 97       	sbiw	r24, 0x01	; 1
 61c:	f1 f7       	brne	.-4      	; 0x61a <LCD_vidPrintMyName+0x114>
 61e:	00 c0       	rjmp	.+0      	; 0x620 <LCD_vidPrintMyName+0x11a>
 620:	00 00       	nop
	     _delay_ms(200);
	     LCD_enuSendInstruction(LCD_u8_SHIFT_CURSOR_LEFT);
	     Local_u8Col=4;
	    Local_u8Row=0;

while (Local_u8Col<19)
 622:	c3 31       	cpi	r28, 0x13	; 19
 624:	08 f4       	brcc	.+2      	; 0x628 <LCD_vidPrintMyName+0x122>
 626:	9c cf       	rjmp	.-200    	; 0x560 <LCD_vidPrintMyName+0x5a>
		     LCD_enuSendCharacter('S');
		     _delay_ms(100);
		     Local_u8Col=Local_u8LastCol;
		     Local_u8Row=Local_u8LastRow;
	 }
}
 628:	df 91       	pop	r29
 62a:	cf 91       	pop	r28
 62c:	1f 91       	pop	r17
 62e:	0f 91       	pop	r16
 630:	ff 90       	pop	r15
 632:	ef 90       	pop	r14
 634:	df 90       	pop	r13
 636:	08 95       	ret

00000638 <LED_enuTurnOn>:
 * Return: Error status>>>>>>>>>   LED_OK , LED_NOK
 * */
LED_tenuErrorStatus LED_enuTurnOn(u8 Copy_u8Port,u8 Copy_u8Pin)
{
	LED_tenuErrorStatus Local_enuErrorStatus = LED_OK;
	if(DIO_enuSetPinValue (Copy_u8Port, Copy_u8Pin,DIO_u8_HIGH)== DIO_NOK)
 638:	41 e0       	ldi	r20, 0x01	; 1
 63a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <DIO_enuSetPinValue>
 * Arguments:   void
 * Return: Error status>>>>>>>>>   LED_OK , LED_NOK
 * */
LED_tenuErrorStatus LED_enuTurnOn(u8 Copy_u8Port,u8 Copy_u8Pin)
{
	LED_tenuErrorStatus Local_enuErrorStatus = LED_OK;
 63e:	91 e0       	ldi	r25, 0x01	; 1
 640:	81 30       	cpi	r24, 0x01	; 1
 642:	09 f0       	breq	.+2      	; 0x646 <LED_enuTurnOn+0xe>
 644:	90 e0       	ldi	r25, 0x00	; 0
	if(DIO_enuSetPinValue (Copy_u8Port, Copy_u8Pin,DIO_u8_HIGH)== DIO_NOK)
	{
		Local_enuErrorStatus=LED_NOK;
	}
	return Local_enuErrorStatus;
}
 646:	89 2f       	mov	r24, r25
 648:	08 95       	ret

0000064a <LED_enuTurnOff>:
 * Return: Error status>>>>>>>>>   LED_OK , LED_NOK
 * */
LED_tenuErrorStatus LED_enuTurnOff(u8 Copy_u8Port,u8 Copy_u8Pin)
{
	    LED_tenuErrorStatus Local_enuErrorStatus = LED_OK;
		if(DIO_enuSetPinValue (Copy_u8Port, Copy_u8Pin,DIO_u8_LOW)== DIO_NOK)
 64a:	40 e0       	ldi	r20, 0x00	; 0
 64c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <DIO_enuSetPinValue>
 *              Second Argument:    Copy_u8Pin,         options(from DIO_u8_PIN0 to DIO_u8_PIN7)
 * Return: Error status>>>>>>>>>   LED_OK , LED_NOK
 * */
LED_tenuErrorStatus LED_enuTurnOff(u8 Copy_u8Port,u8 Copy_u8Pin)
{
	    LED_tenuErrorStatus Local_enuErrorStatus = LED_OK;
 650:	91 e0       	ldi	r25, 0x01	; 1
 652:	81 30       	cpi	r24, 0x01	; 1
 654:	09 f0       	breq	.+2      	; 0x658 <LED_enuTurnOff+0xe>
 656:	90 e0       	ldi	r25, 0x00	; 0
		if(DIO_enuSetPinValue (Copy_u8Port, Copy_u8Pin,DIO_u8_LOW)== DIO_NOK)
		{
			Local_enuErrorStatus=LED_NOK;
		}
		return Local_enuErrorStatus;
}
 658:	89 2f       	mov	r24, r25
 65a:	08 95       	ret

0000065c <LED_enuToggle>:
 * */
LED_tenuErrorStatus LED_enuToggle(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    LED_tenuErrorStatus Local_enuErrorStatus = LED_OK;
	
           if(DIO_enuTogglePin( Copy_u8Port, Copy_u8Pin)== DIO_NOK)
 65c:	0e 94 23 05 	call	0xa46	; 0xa46 <DIO_enuTogglePin>
 *             Second Argument:    Copy_u8Pin,         options(from DIO_u8_PIN0 to DIO_u8_PIN7)
 * Return: Error status>>>>>>>>>  LED_OK , LED_NOK
 * */
LED_tenuErrorStatus LED_enuToggle(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    LED_tenuErrorStatus Local_enuErrorStatus = LED_OK;
 660:	91 e0       	ldi	r25, 0x01	; 1
 662:	81 30       	cpi	r24, 0x01	; 1
 664:	09 f0       	breq	.+2      	; 0x668 <LED_enuToggle+0xc>
 666:	90 e0       	ldi	r25, 0x00	; 0
           if(DIO_enuTogglePin( Copy_u8Port, Copy_u8Pin)== DIO_NOK)
		   {
			   Local_enuErrorStatus=LED_NOK;
		   }
	return Local_enuErrorStatus;
}
 668:	89 2f       	mov	r24, r25
 66a:	08 95       	ret

0000066c <LED_enuReadStatus>:

LED_tenuErrorStatus LED_enuReadStatus(u8 Copy_u8Port,u8 Copy_u8Pin , u8* Add_u8Value)
{
	LED_tenuErrorStatus Local_enuErrorStatus = LED_OK;
	
	if(DIO_enuGetPinValue( Copy_u8Port, Copy_u8Pin,Add_u8Value)== DIO_NOK)
 66c:	0e 94 69 04 	call	0x8d2	; 0x8d2 <DIO_enuGetPinValue>
	return Local_enuErrorStatus;
}

LED_tenuErrorStatus LED_enuReadStatus(u8 Copy_u8Port,u8 Copy_u8Pin , u8* Add_u8Value)
{
	LED_tenuErrorStatus Local_enuErrorStatus = LED_OK;
 670:	91 e0       	ldi	r25, 0x01	; 1
 672:	81 30       	cpi	r24, 0x01	; 1
 674:	09 f0       	breq	.+2      	; 0x678 <LED_enuReadStatus+0xc>
 676:	90 e0       	ldi	r25, 0x00	; 0
	if(DIO_enuGetPinValue( Copy_u8Port, Copy_u8Pin,Add_u8Value)== DIO_NOK)
	{
		Local_enuErrorStatus=LED_NOK;
	}
	return Local_enuErrorStatus;
}
 678:	89 2f       	mov	r24, r25
 67a:	08 95       	ret

0000067c <PORT_vidInit>:

#include "../../MCAL/DIO/DIO_int.h"

void PORT_vidInit()
{
	DIO_vidInit();
 67c:	0e 94 c6 03 	call	0x78c	; 0x78c <DIO_vidInit>
 680:	08 95       	ret

00000682 <ADC_enuEnable>:

ADC_tenuErrorStatus ADC_enuEnable(u8 Copy_ReferenceSelection,u8 Copy_Channel,u8 Copy_u8InterruptMode)
{
	ADC_tenuErrorStatus Local_enuErrorStatus = ADC_OK;

	if( ( ( ADC_u8_VOLTAGE_SELECTION_CHECK(Copy_ReferenceSelection))==0 ) || (Copy_Channel > ADC_u8_ADC7))
 682:	88 23       	and	r24, r24
 684:	21 f0       	breq	.+8      	; 0x68e <ADC_enuEnable+0xc>
 686:	80 34       	cpi	r24, 0x40	; 64
 688:	11 f0       	breq	.+4      	; 0x68e <ADC_enuEnable+0xc>
 68a:	80 3c       	cpi	r24, 0xC0	; 192
 68c:	89 f4       	brne	.+34     	; 0x6b0 <ADC_enuEnable+0x2e>
 68e:	68 30       	cpi	r22, 0x08	; 8
 690:	88 f4       	brcc	.+34     	; 0x6b4 <ADC_enuEnable+0x32>
	{
		 Local_enuErrorStatus = ADC_NOK;
	}
	else
	{          
		ADC_u8_ADMUX_REG |=Copy_ReferenceSelection;
 692:	97 b1       	in	r25, 0x07	; 7
 694:	89 2b       	or	r24, r25
 696:	87 b9       	out	0x07, r24	; 7
		ADC_u8_ADMUX_REG |=Copy_Channel;
 698:	87 b1       	in	r24, 0x07	; 7
 69a:	68 2b       	or	r22, r24
 69c:	67 b9       	out	0x07, r22	; 7
		ADC_u8_ADCSRA_REG |= 0X06; //PRESCALER = 64 // Freq= 125khzc	//can take 9615 Samples per second
 69e:	86 b1       	in	r24, 0x06	; 6
 6a0:	86 60       	ori	r24, 0x06	; 6
 6a2:	86 b9       	out	0x06, r24	; 6
		ADC_u8_ADCSRA_REG |= 0x80; // ADC Enable
 6a4:	37 9a       	sbi	0x06, 7	; 6
		ADC_u8_ADCSRA_REG |= Copy_u8InterruptMode;
 6a6:	86 b1       	in	r24, 0x06	; 6
 6a8:	48 2b       	or	r20, r24
 6aa:	46 b9       	out	0x06, r20	; 6



ADC_tenuErrorStatus ADC_enuEnable(u8 Copy_ReferenceSelection,u8 Copy_Channel,u8 Copy_u8InterruptMode)
{
	ADC_tenuErrorStatus Local_enuErrorStatus = ADC_OK;
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	08 95       	ret

	if( ( ( ADC_u8_VOLTAGE_SELECTION_CHECK(Copy_ReferenceSelection))==0 ) || (Copy_Channel > ADC_u8_ADC7))
	{
		 Local_enuErrorStatus = ADC_NOK;
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	08 95       	ret
 6b4:	81 e0       	ldi	r24, 0x01	; 1
		ADC_u8_ADCSRA_REG |= 0x80; // ADC Enable
		ADC_u8_ADCSRA_REG |= Copy_u8InterruptMode;
	}

	return Local_enuErrorStatus;
}
 6b6:	08 95       	ret

000006b8 <ADC_enuStartConvertion>:

ADC_tenuErrorStatus ADC_enuStartConvertion(void)
{
	ADC_tenuErrorStatus Local_enuErrorStatus = ADC_OK;
     u16 Local_u16TimeOut=5000;
	ADC_u8_ADCSRA_REG |= 0X40; //Start Conversion
 6b8:	36 9a       	sbi	0x06, 6	; 6
}

ADC_tenuErrorStatus ADC_enuStartConvertion(void)
{
	ADC_tenuErrorStatus Local_enuErrorStatus = ADC_OK;
     u16 Local_u16TimeOut=5000;
 6ba:	88 e8       	ldi	r24, 0x88	; 136
 6bc:	93 e1       	ldi	r25, 0x13	; 19
	ADC_u8_ADCSRA_REG |= 0X40; //Start Conversion

	while((((ADC_u8_ADCSRA_REG>>4) & 0X01) == 0 ) && Local_u16TimeOut--); // Poling on the flag
 6be:	26 b1       	in	r18, 0x06	; 6
 6c0:	24 fd       	sbrc	r18, 4
 6c2:	06 c0       	rjmp	.+12     	; 0x6d0 <ADC_enuStartConvertion+0x18>
 6c4:	01 97       	sbiw	r24, 0x01	; 1
 6c6:	2f ef       	ldi	r18, 0xFF	; 255
 6c8:	8f 3f       	cpi	r24, 0xFF	; 255
 6ca:	92 07       	cpc	r25, r18
 6cc:	c1 f7       	brne	.-16     	; 0x6be <ADC_enuStartConvertion+0x6>
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <ADC_enuStartConvertion+0x1c>

	if(Local_u16TimeOut == 0)
 6d0:	00 97       	sbiw	r24, 0x00	; 0
 6d2:	19 f0       	breq	.+6      	; 0x6da <ADC_enuStartConvertion+0x22>
	{
		 Local_enuErrorStatus = ADC_NOK;
	}
	else
	{
		ADC_u8_ADCSRA_REG |= 0X10; //Clear Flag
 6d4:	34 9a       	sbi	0x06, 4	; 6
	return Local_enuErrorStatus;
}

ADC_tenuErrorStatus ADC_enuStartConvertion(void)
{
	ADC_tenuErrorStatus Local_enuErrorStatus = ADC_OK;
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	08 95       	ret

	while((((ADC_u8_ADCSRA_REG>>4) & 0X01) == 0 ) && Local_u16TimeOut--); // Poling on the flag

	if(Local_u16TimeOut == 0)
	{
		 Local_enuErrorStatus = ADC_NOK;
 6da:	81 e0       	ldi	r24, 0x01	; 1
		ADC_u8_ADCSRA_REG |= 0X10; //Clear Flag

	}

	return Local_enuErrorStatus;
}
 6dc:	08 95       	ret

000006de <ADC_enuDisable>:


void ADC_enuDisable(void)
{

	ADC_u8_ADCSRA_REG &= ~(1<<8); // ADC Disable
 6de:	86 b1       	in	r24, 0x06	; 6
 6e0:	86 b9       	out	0x06, r24	; 6


}
 6e2:	08 95       	ret

000006e4 <ADC_enuGetValue>:

ADC_tenuErrorStatus ADC_enuGetValue(u16* Add_Value)
{
 6e4:	fc 01       	movw	r30, r24
	ADC_tenuErrorStatus Local_enuErrorStatus = ADC_OK;
     if(Add_Value == NULL)
 6e6:	00 97       	sbiw	r24, 0x00	; 0
 6e8:	69 f0       	breq	.+26     	; 0x704 <ADC_enuGetValue+0x20>
		 Local_enuErrorStatus = ADC_NOK;

     }
     else
     {
    	    *Add_Value=(u16)(ADC_u8_ADCL_REG );
 6ea:	24 b1       	in	r18, 0x04	; 4
 6ec:	30 e0       	ldi	r19, 0x00	; 0
 6ee:	31 83       	std	Z+1, r19	; 0x01
 6f0:	20 83       	st	Z, r18
			*Add_Value |=(ADC_u8_ADCH_REG << 8);
 6f2:	45 b1       	in	r20, 0x05	; 5
 6f4:	94 2f       	mov	r25, r20
 6f6:	80 e0       	ldi	r24, 0x00	; 0
 6f8:	82 2b       	or	r24, r18
 6fa:	93 2b       	or	r25, r19
 6fc:	91 83       	std	Z+1, r25	; 0x01
 6fe:	80 83       	st	Z, r24

}

ADC_tenuErrorStatus ADC_enuGetValue(u16* Add_Value)
{
	ADC_tenuErrorStatus Local_enuErrorStatus = ADC_OK;
 700:	80 e0       	ldi	r24, 0x00	; 0
 702:	08 95       	ret
     if(Add_Value == NULL)
     {
		 Local_enuErrorStatus = ADC_NOK;
 704:	81 e0       	ldi	r24, 0x01	; 1


     }
	return Local_enuErrorStatus;

}
 706:	08 95       	ret

00000708 <ADC_enuStartConvertion_Asynchronous>:
// NEW FUNCTIONS //

void ADC_enuStartConvertion_Asynchronous(void)
{
   
	ADC_u8_ADCSRA_REG |= 0X40; //Start Conversion
 708:	36 9a       	sbi	0x06, 6	; 6
}
 70a:	08 95       	ret

0000070c <ADC_enuGetValue_Asynch>:

ADC_tenuErrorStatus ADC_enuGetValue_Asynch(func_ptr_one_argument Add_pfuncCBF)
{
	ADC_tenuErrorStatus  Local_enuErrorStatus = ADC_OK;
	/* Check Arguments */
	if(Add_pfuncCBF == NULL )
 70c:	00 97       	sbiw	r24, 0x00	; 0
 70e:	31 f0       	breq	.+12     	; 0x71c <ADC_enuGetValue_Asynch+0x10>
	{
		Local_enuErrorStatus=ADC_NOK;
	}
	else
	{
			ADC_pfun=Add_pfuncCBF;
 710:	90 93 71 00 	sts	0x0071, r25
 714:	80 93 70 00 	sts	0x0070, r24
	ADC_u8_ADCSRA_REG |= 0X40; //Start Conversion
}

ADC_tenuErrorStatus ADC_enuGetValue_Asynch(func_ptr_one_argument Add_pfuncCBF)
{
	ADC_tenuErrorStatus  Local_enuErrorStatus = ADC_OK;
 718:	80 e0       	ldi	r24, 0x00	; 0
 71a:	08 95       	ret
	/* Check Arguments */
	if(Add_pfuncCBF == NULL )
	{
		Local_enuErrorStatus=ADC_NOK;
 71c:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
			ADC_pfun=Add_pfuncCBF;
	}
	return Local_enuErrorStatus;
}
 71e:	08 95       	ret

00000720 <__vector_16>:



void __vector_16(void)    __attribute__((signal,used));
void __vector_16(void)
{
 720:	1f 92       	push	r1
 722:	0f 92       	push	r0
 724:	0f b6       	in	r0, 0x3f	; 63
 726:	0f 92       	push	r0
 728:	11 24       	eor	r1, r1
 72a:	2f 93       	push	r18
 72c:	3f 93       	push	r19
 72e:	4f 93       	push	r20
 730:	5f 93       	push	r21
 732:	6f 93       	push	r22
 734:	7f 93       	push	r23
 736:	8f 93       	push	r24
 738:	9f 93       	push	r25
 73a:	af 93       	push	r26
 73c:	bf 93       	push	r27
 73e:	ef 93       	push	r30
 740:	ff 93       	push	r31
	ADC_u16Value = (u16)(ADC_u8_ADCL_REG | (ADC_u8_ADCH_REG << 8));
 742:	24 b1       	in	r18, 0x04	; 4
 744:	35 b1       	in	r19, 0x05	; 5
 746:	93 2f       	mov	r25, r19
 748:	80 e0       	ldi	r24, 0x00	; 0
 74a:	30 e0       	ldi	r19, 0x00	; 0
 74c:	82 2b       	or	r24, r18
 74e:	93 2b       	or	r25, r19
 750:	90 93 6f 00 	sts	0x006F, r25
 754:	80 93 6e 00 	sts	0x006E, r24
	
	if(ADC_pfun != NULL)
 758:	e0 91 70 00 	lds	r30, 0x0070
 75c:	f0 91 71 00 	lds	r31, 0x0071
 760:	30 97       	sbiw	r30, 0x00	; 0
 762:	19 f0       	breq	.+6      	; 0x76a <__vector_16+0x4a>
	    ADC_pfun(&ADC_u16Value);
 764:	8e e6       	ldi	r24, 0x6E	; 110
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	09 95       	icall
	
}
 76a:	ff 91       	pop	r31
 76c:	ef 91       	pop	r30
 76e:	bf 91       	pop	r27
 770:	af 91       	pop	r26
 772:	9f 91       	pop	r25
 774:	8f 91       	pop	r24
 776:	7f 91       	pop	r23
 778:	6f 91       	pop	r22
 77a:	5f 91       	pop	r21
 77c:	4f 91       	pop	r20
 77e:	3f 91       	pop	r19
 780:	2f 91       	pop	r18
 782:	0f 90       	pop	r0
 784:	0f be       	out	0x3f, r0	; 63
 786:	0f 90       	pop	r0
 788:	1f 90       	pop	r1
 78a:	18 95       	reti

0000078c <DIO_vidInit>:
       #define DIO_u8_OUTPUT_HIGH            1
       #define DIO_u8_INPUT_FLOATING         0
       #define DIO_u8_INPUT_PULLUP           0

      /* Set DDR Values */
	DIO_u8_DDRA_REG = CONC(DIO_u8_PORTA_PIN7, DIO_u8_PORTA_PIN6, DIO_u8_PORTA_PIN5
 78c:	8f e7       	ldi	r24, 0x7F	; 127
 78e:	8a bb       	out	0x1a, r24	; 26
								, DIO_u8_PORTA_PIN4 , DIO_u8_PORTA_PIN3, DIO_u8_PORTA_PIN2
								, DIO_u8_PORTA_PIN1, DIO_u8_PORTA_PIN0);   /* 0b00001111   */

		DIO_u8_DDRB_REG = CONC(DIO_u8_PORTB_PIN7, DIO_u8_PORTB_PIN6, DIO_u8_PORTB_PIN5
 790:	8f eb       	ldi	r24, 0xBF	; 191
 792:	87 bb       	out	0x17, r24	; 23
								, DIO_u8_PORTB_PIN4 , DIO_u8_PORTB_PIN3, DIO_u8_PORTB_PIN2
								, DIO_u8_PORTB_PIN1, DIO_u8_PORTB_PIN0);

		DIO_u8_DDRC_REG = CONC(DIO_u8_PORTC_PIN7, DIO_u8_PORTC_PIN6, DIO_u8_PORTC_PIN5
 794:	8f ef       	ldi	r24, 0xFF	; 255
 796:	84 bb       	out	0x14, r24	; 20
								, DIO_u8_PORTC_PIN4 , DIO_u8_PORTC_PIN3, DIO_u8_PORTC_PIN2
								, DIO_u8_PORTC_PIN1, DIO_u8_PORTC_PIN0);

		DIO_u8_DDRD_REG = CONC(DIO_u8_PORTD_PIN7, DIO_u8_PORTD_PIN6, DIO_u8_PORTD_PIN5
 798:	9e ef       	ldi	r25, 0xFE	; 254
 79a:	91 bb       	out	0x11, r25	; 17
    #define DIO_u8_INPUT_FLOATING         0
    #define DIO_u8_INPUT_PULLUP           1


	/* set Port values */
		DIO_u8_PORTA_REG = CONC(DIO_u8_PORTA_PIN7, DIO_u8_PORTA_PIN6, DIO_u8_PORTA_PIN5
 79c:	1b ba       	out	0x1b, r1	; 27
									, DIO_u8_PORTA_PIN4 , DIO_u8_PORTA_PIN3, DIO_u8_PORTA_PIN2
									, DIO_u8_PORTA_PIN1, DIO_u8_PORTA_PIN0);   /* 0b11110001   */

			DIO_u8_PORTB_REG = CONC(DIO_u8_PORTB_PIN7, DIO_u8_PORTB_PIN6, DIO_u8_PORTB_PIN5
 79e:	18 ba       	out	0x18, r1	; 24
									, DIO_u8_PORTB_PIN4 , DIO_u8_PORTB_PIN3, DIO_u8_PORTB_PIN2
									, DIO_u8_PORTB_PIN1, DIO_u8_PORTB_PIN0);

			DIO_u8_PORTC_REG = CONC(DIO_u8_PORTC_PIN7, DIO_u8_PORTC_PIN6, DIO_u8_PORTC_PIN5
 7a0:	85 bb       	out	0x15, r24	; 21
									, DIO_u8_PORTC_PIN4 , DIO_u8_PORTC_PIN3, DIO_u8_PORTC_PIN2
									, DIO_u8_PORTC_PIN1, DIO_u8_PORTC_PIN0);

			DIO_u8_PORTD_REG = CONC(DIO_u8_PORTD_PIN7, DIO_u8_PORTD_PIN6, DIO_u8_PORTD_PIN5
 7a2:	12 ba       	out	0x12, r1	; 18

  #define DIO_u8_OUTPUT_LOW             0
  #define DIO_u8_OUTPUT_HIGH            1
  #define DIO_u8_INPUT_FLOATING         2
  #define DIO_u8_INPUT_PULLUP           3
}
 7a4:	08 95       	ret

000007a6 <DIO_enuSetPinValue>:
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
	//check error status //
	if(Copy_u8Port > DIO_u8_PORTD || Copy_u8Pin > DIO_u8_PIN7 || Copy_u8Value> DIO_u8_HIGH)
 7a6:	84 30       	cpi	r24, 0x04	; 4
 7a8:	08 f0       	brcs	.+2      	; 0x7ac <DIO_enuSetPinValue+0x6>
 7aa:	8b c0       	rjmp	.+278    	; 0x8c2 <__stack+0x63>
 7ac:	68 30       	cpi	r22, 0x08	; 8
 7ae:	08 f0       	brcs	.+2      	; 0x7b2 <DIO_enuSetPinValue+0xc>
 7b0:	8a c0       	rjmp	.+276    	; 0x8c6 <__stack+0x67>
 7b2:	42 30       	cpi	r20, 0x02	; 2
 7b4:	08 f0       	brcs	.+2      	; 0x7b8 <DIO_enuSetPinValue+0x12>
 7b6:	89 c0       	rjmp	.+274    	; 0x8ca <__stack+0x6b>
		Local_enuErrorStatus= DIO_NOK;
	else
	{
		switch (Copy_u8Port)
 7b8:	81 30       	cpi	r24, 0x01	; 1
 7ba:	41 f1       	breq	.+80     	; 0x80c <DIO_enuSetPinValue+0x66>
 7bc:	81 30       	cpi	r24, 0x01	; 1
 7be:	38 f0       	brcs	.+14     	; 0x7ce <DIO_enuSetPinValue+0x28>
 7c0:	82 30       	cpi	r24, 0x02	; 2
 7c2:	09 f4       	brne	.+2      	; 0x7c6 <DIO_enuSetPinValue+0x20>
 7c4:	41 c0       	rjmp	.+130    	; 0x848 <DIO_enuSetPinValue+0xa2>
 7c6:	83 30       	cpi	r24, 0x03	; 3
 7c8:	09 f0       	breq	.+2      	; 0x7cc <DIO_enuSetPinValue+0x26>
 7ca:	81 c0       	rjmp	.+258    	; 0x8ce <__stack+0x6f>
 7cc:	5b c0       	rjmp	.+182    	; 0x884 <__stack+0x25>
		{
            case DIO_u8_PORTA:
            		(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTA_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTA_REG &= ~(1<<Copy_u8Pin));
 7ce:	41 30       	cpi	r20, 0x01	; 1
 7d0:	71 f4       	brne	.+28     	; 0x7ee <DIO_enuSetPinValue+0x48>
 7d2:	2b b3       	in	r18, 0x1b	; 27
 7d4:	81 e0       	ldi	r24, 0x01	; 1
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	ac 01       	movw	r20, r24
 7da:	02 c0       	rjmp	.+4      	; 0x7e0 <DIO_enuSetPinValue+0x3a>
 7dc:	44 0f       	add	r20, r20
 7de:	55 1f       	adc	r21, r21
 7e0:	6a 95       	dec	r22
 7e2:	e2 f7       	brpl	.-8      	; 0x7dc <DIO_enuSetPinValue+0x36>
 7e4:	ba 01       	movw	r22, r20
 7e6:	62 2b       	or	r22, r18
 7e8:	6b bb       	out	0x1b, r22	; 27
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 7ea:	80 e0       	ldi	r24, 0x00	; 0
 7ec:	08 95       	ret
	else
	{
		switch (Copy_u8Port)
		{
            case DIO_u8_PORTA:
            		(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTA_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTA_REG &= ~(1<<Copy_u8Pin));
 7ee:	2b b3       	in	r18, 0x1b	; 27
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	ac 01       	movw	r20, r24
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <DIO_enuSetPinValue+0x56>
 7f8:	44 0f       	add	r20, r20
 7fa:	55 1f       	adc	r21, r21
 7fc:	6a 95       	dec	r22
 7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <DIO_enuSetPinValue+0x52>
 800:	ba 01       	movw	r22, r20
 802:	60 95       	com	r22
 804:	62 23       	and	r22, r18
 806:	6b bb       	out	0x1b, r22	; 27
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 808:	80 e0       	ldi	r24, 0x00	; 0
 80a:	08 95       	ret
            case DIO_u8_PORTA:
            		(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTA_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTA_REG &= ~(1<<Copy_u8Pin));
            		break;

            case DIO_u8_PORTB:
           				(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTB_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTB_REG &= ~(1<<Copy_u8Pin));
 80c:	41 30       	cpi	r20, 0x01	; 1
 80e:	69 f4       	brne	.+26     	; 0x82a <DIO_enuSetPinValue+0x84>
 810:	48 b3       	in	r20, 0x18	; 24
 812:	21 e0       	ldi	r18, 0x01	; 1
 814:	30 e0       	ldi	r19, 0x00	; 0
 816:	c9 01       	movw	r24, r18
 818:	02 c0       	rjmp	.+4      	; 0x81e <DIO_enuSetPinValue+0x78>
 81a:	88 0f       	add	r24, r24
 81c:	99 1f       	adc	r25, r25
 81e:	6a 95       	dec	r22
 820:	e2 f7       	brpl	.-8      	; 0x81a <DIO_enuSetPinValue+0x74>
 822:	84 2b       	or	r24, r20
 824:	88 bb       	out	0x18, r24	; 24
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 826:	80 e0       	ldi	r24, 0x00	; 0
 828:	08 95       	ret
            case DIO_u8_PORTA:
            		(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTA_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTA_REG &= ~(1<<Copy_u8Pin));
            		break;

            case DIO_u8_PORTB:
           				(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTB_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTB_REG &= ~(1<<Copy_u8Pin));
 82a:	28 b3       	in	r18, 0x18	; 24
 82c:	81 e0       	ldi	r24, 0x01	; 1
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	ac 01       	movw	r20, r24
 832:	02 c0       	rjmp	.+4      	; 0x838 <DIO_enuSetPinValue+0x92>
 834:	44 0f       	add	r20, r20
 836:	55 1f       	adc	r21, r21
 838:	6a 95       	dec	r22
 83a:	e2 f7       	brpl	.-8      	; 0x834 <DIO_enuSetPinValue+0x8e>
 83c:	ba 01       	movw	r22, r20
 83e:	60 95       	com	r22
 840:	62 23       	and	r22, r18
 842:	68 bb       	out	0x18, r22	; 24
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 844:	80 e0       	ldi	r24, 0x00	; 0
 846:	08 95       	ret
            case DIO_u8_PORTB:
           				(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTB_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTB_REG &= ~(1<<Copy_u8Pin));
           				break;

            case DIO_u8_PORTC:
           				(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTC_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTC_REG &= ~(1<<Copy_u8Pin));
 848:	41 30       	cpi	r20, 0x01	; 1
 84a:	69 f4       	brne	.+26     	; 0x866 <__stack+0x7>
 84c:	45 b3       	in	r20, 0x15	; 21
 84e:	21 e0       	ldi	r18, 0x01	; 1
 850:	30 e0       	ldi	r19, 0x00	; 0
 852:	c9 01       	movw	r24, r18
 854:	02 c0       	rjmp	.+4      	; 0x85a <DIO_enuSetPinValue+0xb4>
 856:	88 0f       	add	r24, r24
 858:	99 1f       	adc	r25, r25
 85a:	6a 95       	dec	r22
 85c:	e2 f7       	brpl	.-8      	; 0x856 <DIO_enuSetPinValue+0xb0>
 85e:	84 2b       	or	r24, r20
 860:	85 bb       	out	0x15, r24	; 21
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 862:	80 e0       	ldi	r24, 0x00	; 0
 864:	08 95       	ret
            case DIO_u8_PORTB:
           				(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTB_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTB_REG &= ~(1<<Copy_u8Pin));
           				break;

            case DIO_u8_PORTC:
           				(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTC_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTC_REG &= ~(1<<Copy_u8Pin));
 866:	25 b3       	in	r18, 0x15	; 21
 868:	81 e0       	ldi	r24, 0x01	; 1
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	ac 01       	movw	r20, r24
 86e:	02 c0       	rjmp	.+4      	; 0x874 <__stack+0x15>
 870:	44 0f       	add	r20, r20
 872:	55 1f       	adc	r21, r21
 874:	6a 95       	dec	r22
 876:	e2 f7       	brpl	.-8      	; 0x870 <__stack+0x11>
 878:	ba 01       	movw	r22, r20
 87a:	60 95       	com	r22
 87c:	62 23       	and	r22, r18
 87e:	65 bb       	out	0x15, r22	; 21
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 880:	80 e0       	ldi	r24, 0x00	; 0
 882:	08 95       	ret
            case DIO_u8_PORTC:
           				(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTC_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTC_REG &= ~(1<<Copy_u8Pin));
           				break;

            case DIO_u8_PORTD:
           				(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTD_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTD_REG &= ~(1<<Copy_u8Pin));
 884:	41 30       	cpi	r20, 0x01	; 1
 886:	71 f4       	brne	.+28     	; 0x8a4 <__stack+0x45>
 888:	22 b3       	in	r18, 0x12	; 18
 88a:	81 e0       	ldi	r24, 0x01	; 1
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	ac 01       	movw	r20, r24
 890:	02 c0       	rjmp	.+4      	; 0x896 <__stack+0x37>
 892:	44 0f       	add	r20, r20
 894:	55 1f       	adc	r21, r21
 896:	6a 95       	dec	r22
 898:	e2 f7       	brpl	.-8      	; 0x892 <__stack+0x33>
 89a:	ba 01       	movw	r22, r20
 89c:	62 2b       	or	r22, r18
 89e:	62 bb       	out	0x12, r22	; 18
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 8a0:	80 e0       	ldi	r24, 0x00	; 0
 8a2:	08 95       	ret
            case DIO_u8_PORTC:
           				(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTC_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTC_REG &= ~(1<<Copy_u8Pin));
           				break;

            case DIO_u8_PORTD:
           				(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTD_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTD_REG &= ~(1<<Copy_u8Pin));
 8a4:	22 b3       	in	r18, 0x12	; 18
 8a6:	81 e0       	ldi	r24, 0x01	; 1
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	ac 01       	movw	r20, r24
 8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <__stack+0x53>
 8ae:	44 0f       	add	r20, r20
 8b0:	55 1f       	adc	r21, r21
 8b2:	6a 95       	dec	r22
 8b4:	e2 f7       	brpl	.-8      	; 0x8ae <__stack+0x4f>
 8b6:	ba 01       	movw	r22, r20
 8b8:	60 95       	com	r22
 8ba:	62 23       	and	r22, r18
 8bc:	62 bb       	out	0x12, r22	; 18
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 8be:	80 e0       	ldi	r24, 0x00	; 0
 8c0:	08 95       	ret
	//check error status //
	if(Copy_u8Port > DIO_u8_PORTD || Copy_u8Pin > DIO_u8_PIN7 || Copy_u8Value> DIO_u8_HIGH)
		Local_enuErrorStatus= DIO_NOK;
 8c2:	81 e0       	ldi	r24, 0x01	; 1
 8c4:	08 95       	ret
 8c6:	81 e0       	ldi	r24, 0x01	; 1
 8c8:	08 95       	ret
 8ca:	81 e0       	ldi	r24, 0x01	; 1
 8cc:	08 95       	ret
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 8ce:	80 e0       	ldi	r24, 0x00	; 0
           				break;
		}
	}
	return Local_enuErrorStatus;

}
 8d0:	08 95       	ret

000008d2 <DIO_enuGetPinValue>:
DIO_tenuErrorStatus DIO_enuGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Add_pu8PinValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;

	// Error Checks  //
   if((Copy_u8Port>DIO_u8_PORTD) || (Copy_u8Pin > DIO_u8_PIN7) || (Add_pu8PinValue == NULL))
 8d2:	84 30       	cpi	r24, 0x04	; 4
 8d4:	08 f0       	brcs	.+2      	; 0x8d8 <DIO_enuGetPinValue+0x6>
 8d6:	49 c0       	rjmp	.+146    	; 0x96a <DIO_enuGetPinValue+0x98>
 8d8:	68 30       	cpi	r22, 0x08	; 8
 8da:	08 f0       	brcs	.+2      	; 0x8de <DIO_enuGetPinValue+0xc>
 8dc:	48 c0       	rjmp	.+144    	; 0x96e <DIO_enuGetPinValue+0x9c>
 8de:	41 15       	cp	r20, r1
 8e0:	51 05       	cpc	r21, r1
 8e2:	09 f4       	brne	.+2      	; 0x8e6 <DIO_enuGetPinValue+0x14>
 8e4:	46 c0       	rjmp	.+140    	; 0x972 <DIO_enuGetPinValue+0xa0>
	   Local_enuErrorStatus = DIO_NOK;
   else
   {
	     switch (Copy_u8Port)
 8e6:	81 30       	cpi	r24, 0x01	; 1
 8e8:	b1 f0       	breq	.+44     	; 0x916 <DIO_enuGetPinValue+0x44>
 8ea:	81 30       	cpi	r24, 0x01	; 1
 8ec:	30 f0       	brcs	.+12     	; 0x8fa <DIO_enuGetPinValue+0x28>
 8ee:	82 30       	cpi	r24, 0x02	; 2
 8f0:	01 f1       	breq	.+64     	; 0x932 <DIO_enuGetPinValue+0x60>
 8f2:	83 30       	cpi	r24, 0x03	; 3
 8f4:	09 f0       	breq	.+2      	; 0x8f8 <DIO_enuGetPinValue+0x26>
 8f6:	3f c0       	rjmp	.+126    	; 0x976 <DIO_enuGetPinValue+0xa4>
 8f8:	2a c0       	rjmp	.+84     	; 0x94e <DIO_enuGetPinValue+0x7c>
	   		  {
	               case DIO_u8_PORTA:
	            	   *Add_pu8PinValue= ((DIO_u8_PINA_REG >> Copy_u8Pin) & 1);
 8fa:	89 b3       	in	r24, 0x19	; 25
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	9c 01       	movw	r18, r24
 900:	02 c0       	rjmp	.+4      	; 0x906 <DIO_enuGetPinValue+0x34>
 902:	35 95       	asr	r19
 904:	27 95       	ror	r18
 906:	6a 95       	dec	r22
 908:	e2 f7       	brpl	.-8      	; 0x902 <DIO_enuGetPinValue+0x30>
 90a:	b9 01       	movw	r22, r18
 90c:	61 70       	andi	r22, 0x01	; 1
 90e:	fa 01       	movw	r30, r20
 910:	60 83       	st	Z, r22
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Add_pu8PinValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 912:	80 e0       	ldi	r24, 0x00	; 0
   {
	     switch (Copy_u8Port)
	   		  {
	               case DIO_u8_PORTA:
	            	   *Add_pu8PinValue= ((DIO_u8_PINA_REG >> Copy_u8Pin) & 1);
	               		break;
 914:	08 95       	ret

	               case DIO_u8_PORTB:
	            	   *Add_pu8PinValue= ((DIO_u8_PINB_REG>>Copy_u8Pin)& 1) ;
 916:	86 b3       	in	r24, 0x16	; 22
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	9c 01       	movw	r18, r24
 91c:	02 c0       	rjmp	.+4      	; 0x922 <DIO_enuGetPinValue+0x50>
 91e:	35 95       	asr	r19
 920:	27 95       	ror	r18
 922:	6a 95       	dec	r22
 924:	e2 f7       	brpl	.-8      	; 0x91e <DIO_enuGetPinValue+0x4c>
 926:	b9 01       	movw	r22, r18
 928:	61 70       	andi	r22, 0x01	; 1
 92a:	fa 01       	movw	r30, r20
 92c:	60 83       	st	Z, r22
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Add_pu8PinValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 92e:	80 e0       	ldi	r24, 0x00	; 0
	            	   *Add_pu8PinValue= ((DIO_u8_PINA_REG >> Copy_u8Pin) & 1);
	               		break;

	               case DIO_u8_PORTB:
	            	   *Add_pu8PinValue= ((DIO_u8_PINB_REG>>Copy_u8Pin)& 1) ;
	            	   break;
 930:	08 95       	ret

	               case DIO_u8_PORTC:
	            	   *Add_pu8PinValue= ((DIO_u8_PINC_REG>>Copy_u8Pin)& 1) ;
 932:	83 b3       	in	r24, 0x13	; 19
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	9c 01       	movw	r18, r24
 938:	02 c0       	rjmp	.+4      	; 0x93e <DIO_enuGetPinValue+0x6c>
 93a:	35 95       	asr	r19
 93c:	27 95       	ror	r18
 93e:	6a 95       	dec	r22
 940:	e2 f7       	brpl	.-8      	; 0x93a <DIO_enuGetPinValue+0x68>
 942:	b9 01       	movw	r22, r18
 944:	61 70       	andi	r22, 0x01	; 1
 946:	fa 01       	movw	r30, r20
 948:	60 83       	st	Z, r22
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Add_pu8PinValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 94a:	80 e0       	ldi	r24, 0x00	; 0
	            	   *Add_pu8PinValue= ((DIO_u8_PINB_REG>>Copy_u8Pin)& 1) ;
	            	   break;

	               case DIO_u8_PORTC:
	            	   *Add_pu8PinValue= ((DIO_u8_PINC_REG>>Copy_u8Pin)& 1) ;
	            	   break;
 94c:	08 95       	ret

	               case DIO_u8_PORTD:
	            	   *Add_pu8PinValue= ((DIO_u8_PIND_REG>>Copy_u8Pin)& 1) ;
 94e:	80 b3       	in	r24, 0x10	; 16
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	9c 01       	movw	r18, r24
 954:	02 c0       	rjmp	.+4      	; 0x95a <DIO_enuGetPinValue+0x88>
 956:	35 95       	asr	r19
 958:	27 95       	ror	r18
 95a:	6a 95       	dec	r22
 95c:	e2 f7       	brpl	.-8      	; 0x956 <DIO_enuGetPinValue+0x84>
 95e:	b9 01       	movw	r22, r18
 960:	61 70       	andi	r22, 0x01	; 1
 962:	fa 01       	movw	r30, r20
 964:	60 83       	st	Z, r22
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Add_pu8PinValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 966:	80 e0       	ldi	r24, 0x00	; 0
	            	   *Add_pu8PinValue= ((DIO_u8_PINC_REG>>Copy_u8Pin)& 1) ;
	            	   break;

	               case DIO_u8_PORTD:
	            	   *Add_pu8PinValue= ((DIO_u8_PIND_REG>>Copy_u8Pin)& 1) ;
	            	   break;
 968:	08 95       	ret
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;

	// Error Checks  //
   if((Copy_u8Port>DIO_u8_PORTD) || (Copy_u8Pin > DIO_u8_PIN7) || (Add_pu8PinValue == NULL))
	   Local_enuErrorStatus = DIO_NOK;
 96a:	81 e0       	ldi	r24, 0x01	; 1
 96c:	08 95       	ret
 96e:	81 e0       	ldi	r24, 0x01	; 1
 970:	08 95       	ret
 972:	81 e0       	ldi	r24, 0x01	; 1
 974:	08 95       	ret
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Add_pu8PinValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 976:	80 e0       	ldi	r24, 0x00	; 0
	            	   *Add_pu8PinValue= ((DIO_u8_PIND_REG>>Copy_u8Pin)& 1) ;
	            	   break;
	   	   	}
   }
   return Local_enuErrorStatus;
}
 978:	08 95       	ret

0000097a <DIO_enuSetPortValue>:
DIO_tenuErrorStatus DIO_enuSetPortValue (u8 Copy_u8Port, u8 Copy_u8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;

	// check error status //
	if((Copy_u8Port>3 )|| (Copy_u8PortValue > 255))
 97a:	84 30       	cpi	r24, 0x04	; 4
 97c:	a8 f4       	brcc	.+42     	; 0x9a8 <DIO_enuSetPortValue+0x2e>
	{
		Local_enuErrorStatus= DIO_NOK;
	}
	else
	{
		 switch (Copy_u8Port)
 97e:	81 30       	cpi	r24, 0x01	; 1
 980:	51 f0       	breq	.+20     	; 0x996 <DIO_enuSetPortValue+0x1c>
 982:	81 30       	cpi	r24, 0x01	; 1
 984:	28 f0       	brcs	.+10     	; 0x990 <DIO_enuSetPortValue+0x16>
 986:	82 30       	cpi	r24, 0x02	; 2
 988:	49 f0       	breq	.+18     	; 0x99c <DIO_enuSetPortValue+0x22>
 98a:	83 30       	cpi	r24, 0x03	; 3
 98c:	79 f4       	brne	.+30     	; 0x9ac <DIO_enuSetPortValue+0x32>
 98e:	09 c0       	rjmp	.+18     	; 0x9a2 <DIO_enuSetPortValue+0x28>
	       {
	          case DIO_u8_PORTA:
	        	  DIO_u8_PORTA_REG = Copy_u8PortValue;
 990:	6b bb       	out	0x1b, r22	; 27
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPortValue (u8 Copy_u8Port, u8 Copy_u8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 992:	80 e0       	ldi	r24, 0x00	; 0
	{
		 switch (Copy_u8Port)
	       {
	          case DIO_u8_PORTA:
	        	  DIO_u8_PORTA_REG = Copy_u8PortValue;
	         		break;
 994:	08 95       	ret

	          case DIO_u8_PORTB:
	        	  DIO_u8_PORTB_REG = Copy_u8PortValue;
 996:	68 bb       	out	0x18, r22	; 24
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPortValue (u8 Copy_u8Port, u8 Copy_u8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 998:	80 e0       	ldi	r24, 0x00	; 0
	        	  DIO_u8_PORTA_REG = Copy_u8PortValue;
	         		break;

	          case DIO_u8_PORTB:
	        	  DIO_u8_PORTB_REG = Copy_u8PortValue;
	      	   break;
 99a:	08 95       	ret

	          case DIO_u8_PORTC:
	        	  DIO_u8_PORTC_REG = Copy_u8PortValue;
 99c:	65 bb       	out	0x15, r22	; 21
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPortValue (u8 Copy_u8Port, u8 Copy_u8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 99e:	80 e0       	ldi	r24, 0x00	; 0
	        	  DIO_u8_PORTB_REG = Copy_u8PortValue;
	      	   break;

	          case DIO_u8_PORTC:
	        	  DIO_u8_PORTC_REG = Copy_u8PortValue;
	      	   break;
 9a0:	08 95       	ret

	          case DIO_u8_PORTD:
	        	  DIO_u8_PORTD_REG = Copy_u8PortValue;
 9a2:	62 bb       	out	0x12, r22	; 18
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPortValue (u8 Copy_u8Port, u8 Copy_u8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 9a4:	80 e0       	ldi	r24, 0x00	; 0
	        	  DIO_u8_PORTC_REG = Copy_u8PortValue;
	      	   break;

	          case DIO_u8_PORTD:
	        	  DIO_u8_PORTD_REG = Copy_u8PortValue;
	      	   break;
 9a6:	08 95       	ret
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;

	// check error status //
	if((Copy_u8Port>3 )|| (Copy_u8PortValue > 255))
	{
		Local_enuErrorStatus= DIO_NOK;
 9a8:	81 e0       	ldi	r24, 0x01	; 1
 9aa:	08 95       	ret
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPortValue (u8 Copy_u8Port, u8 Copy_u8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 9ac:	80 e0       	ldi	r24, 0x00	; 0
	      	   break;
	 	  }
	}

   return Local_enuErrorStatus;
}
 9ae:	08 95       	ret

000009b0 <DIO_enuGetPortValue>:
DIO_tenuErrorStatus DIO_enuGetPortValue (u8 Copy_u8Port, u8 *Add_pu8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;

		// check error status //
		if((Copy_u8Port>3 )|| (Add_pu8PortValue == NULL))
 9b0:	84 30       	cpi	r24, 0x04	; 4
 9b2:	00 f5       	brcc	.+64     	; 0x9f4 <DIO_enuGetPortValue+0x44>
 9b4:	61 15       	cp	r22, r1
 9b6:	71 05       	cpc	r23, r1
 9b8:	f9 f0       	breq	.+62     	; 0x9f8 <DIO_enuGetPortValue+0x48>
		{
			Local_enuErrorStatus= DIO_NOK;
		}
		else
		{
			 switch (Copy_u8Port)
 9ba:	81 30       	cpi	r24, 0x01	; 1
 9bc:	61 f0       	breq	.+24     	; 0x9d6 <DIO_enuGetPortValue+0x26>
 9be:	81 30       	cpi	r24, 0x01	; 1
 9c0:	28 f0       	brcs	.+10     	; 0x9cc <DIO_enuGetPortValue+0x1c>
 9c2:	82 30       	cpi	r24, 0x02	; 2
 9c4:	69 f0       	breq	.+26     	; 0x9e0 <DIO_enuGetPortValue+0x30>
 9c6:	83 30       	cpi	r24, 0x03	; 3
 9c8:	c9 f4       	brne	.+50     	; 0x9fc <DIO_enuGetPortValue+0x4c>
 9ca:	0f c0       	rjmp	.+30     	; 0x9ea <DIO_enuGetPortValue+0x3a>
		       {
		          case DIO_u8_PORTA:
		        	  *Add_pu8PortValue= DIO_u8_PORTA_REG ;
 9cc:	8b b3       	in	r24, 0x1b	; 27
 9ce:	fb 01       	movw	r30, r22
 9d0:	80 83       	st	Z, r24
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPortValue (u8 Copy_u8Port, u8 *Add_pu8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 9d2:	80 e0       	ldi	r24, 0x00	; 0
		{
			 switch (Copy_u8Port)
		       {
		          case DIO_u8_PORTA:
		        	  *Add_pu8PortValue= DIO_u8_PORTA_REG ;
		        	  break;
 9d4:	08 95       	ret

		          case DIO_u8_PORTB:
		        	  *Add_pu8PortValue= DIO_u8_PORTB_REG ;
 9d6:	88 b3       	in	r24, 0x18	; 24
 9d8:	fb 01       	movw	r30, r22
 9da:	80 83       	st	Z, r24
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPortValue (u8 Copy_u8Port, u8 *Add_pu8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 9dc:	80 e0       	ldi	r24, 0x00	; 0
		        	  *Add_pu8PortValue= DIO_u8_PORTA_REG ;
		        	  break;

		          case DIO_u8_PORTB:
		        	  *Add_pu8PortValue= DIO_u8_PORTB_REG ;
		        	  break;
 9de:	08 95       	ret

		          case DIO_u8_PORTC:
	            	   *Add_pu8PortValue= DIO_u8_PORTC_REG ;
 9e0:	85 b3       	in	r24, 0x15	; 21
 9e2:	fb 01       	movw	r30, r22
 9e4:	80 83       	st	Z, r24
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPortValue (u8 Copy_u8Port, u8 *Add_pu8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 9e6:	80 e0       	ldi	r24, 0x00	; 0
		        	  *Add_pu8PortValue= DIO_u8_PORTB_REG ;
		        	  break;

		          case DIO_u8_PORTC:
	            	   *Add_pu8PortValue= DIO_u8_PORTC_REG ;
		      	   break;
 9e8:	08 95       	ret

		          case DIO_u8_PORTD:
		        	  *Add_pu8PortValue= DIO_u8_PORTD_REG ;
 9ea:	82 b3       	in	r24, 0x12	; 18
 9ec:	fb 01       	movw	r30, r22
 9ee:	80 83       	st	Z, r24
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPortValue (u8 Copy_u8Port, u8 *Add_pu8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 9f0:	80 e0       	ldi	r24, 0x00	; 0
	            	   *Add_pu8PortValue= DIO_u8_PORTC_REG ;
		      	   break;

		          case DIO_u8_PORTD:
		        	  *Add_pu8PortValue= DIO_u8_PORTD_REG ;
		        	  break;
 9f2:	08 95       	ret
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;

		// check error status //
		if((Copy_u8Port>3 )|| (Add_pu8PortValue == NULL))
		{
			Local_enuErrorStatus= DIO_NOK;
 9f4:	81 e0       	ldi	r24, 0x01	; 1
 9f6:	08 95       	ret
 9f8:	81 e0       	ldi	r24, 0x01	; 1
 9fa:	08 95       	ret
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPortValue (u8 Copy_u8Port, u8 *Add_pu8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 9fc:	80 e0       	ldi	r24, 0x00	; 0
		        	  break;
		 	  }
		}

	   return Local_enuErrorStatus;
}
 9fe:	08 95       	ret

00000a00 <DIO_enuTogglePort>:
DIO_tenuErrorStatus DIO_enuTogglePort(u8 Copy_u8Port)
{
 	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;

 	// check error status //
 	if( Copy_u8Port>3 )
 a00:	84 30       	cpi	r24, 0x04	; 4
 a02:	e8 f4       	brcc	.+58     	; 0xa3e <DIO_enuTogglePort+0x3e>
 	{
	 	Local_enuErrorStatus= DIO_NOK;
 	}
	 else
	 {
		 switch (Copy_u8Port)
 a04:	81 30       	cpi	r24, 0x01	; 1
 a06:	61 f0       	breq	.+24     	; 0xa20 <DIO_enuTogglePort+0x20>
 a08:	81 30       	cpi	r24, 0x01	; 1
 a0a:	28 f0       	brcs	.+10     	; 0xa16 <DIO_enuTogglePort+0x16>
 a0c:	82 30       	cpi	r24, 0x02	; 2
 a0e:	69 f0       	breq	.+26     	; 0xa2a <DIO_enuTogglePort+0x2a>
 a10:	83 30       	cpi	r24, 0x03	; 3
 a12:	b9 f4       	brne	.+46     	; 0xa42 <DIO_enuTogglePort+0x42>
 a14:	0f c0       	rjmp	.+30     	; 0xa34 <DIO_enuTogglePort+0x34>
		 {
	          case DIO_u8_PORTA:
	          DIO_u8_PORTA_REG ^= 0xFF;  //first way
 a16:	8b b3       	in	r24, 0x1b	; 27
 a18:	80 95       	com	r24
 a1a:	8b bb       	out	0x1b, r24	; 27
	   return Local_enuErrorStatus;
}

DIO_tenuErrorStatus DIO_enuTogglePort(u8 Copy_u8Port)
{
 	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 a1c:	80 e0       	ldi	r24, 0x00	; 0
	 {
		 switch (Copy_u8Port)
		 {
	          case DIO_u8_PORTA:
	          DIO_u8_PORTA_REG ^= 0xFF;  //first way
	          break;
 a1e:	08 95       	ret

	          case DIO_u8_PORTB:
	          DIO_u8_PORTB_REG = ~DIO_u8_PORTA_REG; // second way
 a20:	8b b3       	in	r24, 0x1b	; 27
 a22:	80 95       	com	r24
 a24:	88 bb       	out	0x18, r24	; 24
	   return Local_enuErrorStatus;
}

DIO_tenuErrorStatus DIO_enuTogglePort(u8 Copy_u8Port)
{
 	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 a26:	80 e0       	ldi	r24, 0x00	; 0
	          DIO_u8_PORTA_REG ^= 0xFF;  //first way
	          break;

	          case DIO_u8_PORTB:
	          DIO_u8_PORTB_REG = ~DIO_u8_PORTA_REG; // second way
	          break;
 a28:	08 95       	ret

	          case DIO_u8_PORTC:
	          DIO_u8_PORTC_REG ^= 0xFF;
 a2a:	85 b3       	in	r24, 0x15	; 21
 a2c:	80 95       	com	r24
 a2e:	85 bb       	out	0x15, r24	; 21
	   return Local_enuErrorStatus;
}

DIO_tenuErrorStatus DIO_enuTogglePort(u8 Copy_u8Port)
{
 	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 a30:	80 e0       	ldi	r24, 0x00	; 0
	          DIO_u8_PORTB_REG = ~DIO_u8_PORTA_REG; // second way
	          break;

	          case DIO_u8_PORTC:
	          DIO_u8_PORTC_REG ^= 0xFF;
	          break;
 a32:	08 95       	ret

	          case DIO_u8_PORTD:
	          DIO_u8_PORTD_REG  ^= 0xFF;
 a34:	82 b3       	in	r24, 0x12	; 18
 a36:	80 95       	com	r24
 a38:	82 bb       	out	0x12, r24	; 18
	   return Local_enuErrorStatus;
}

DIO_tenuErrorStatus DIO_enuTogglePort(u8 Copy_u8Port)
{
 	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 a3a:	80 e0       	ldi	r24, 0x00	; 0
	          DIO_u8_PORTC_REG ^= 0xFF;
	          break;

	          case DIO_u8_PORTD:
	          DIO_u8_PORTD_REG  ^= 0xFF;
	          break;
 a3c:	08 95       	ret
 	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;

 	// check error status //
 	if( Copy_u8Port>3 )
 	{
	 	Local_enuErrorStatus= DIO_NOK;
 a3e:	81 e0       	ldi	r24, 0x01	; 1
 a40:	08 95       	ret
	   return Local_enuErrorStatus;
}

DIO_tenuErrorStatus DIO_enuTogglePort(u8 Copy_u8Port)
{
 	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 a42:	80 e0       	ldi	r24, 0x00	; 0
		 } 
	 }		 
	 
	 
	 	   return Local_enuErrorStatus;
}
 a44:	08 95       	ret

00000a46 <DIO_enuTogglePin>:

DIO_tenuErrorStatus DIO_enuTogglePin(u8 Copy_u8Port, u8 Copy_u8Pin)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
	//check error status //
	if(Copy_u8Port > DIO_u8_PORTD || Copy_u8Pin > DIO_u8_PIN7 )
 a46:	84 30       	cpi	r24, 0x04	; 4
 a48:	08 f0       	brcs	.+2      	; 0xa4c <DIO_enuTogglePin+0x6>
 a4a:	45 c0       	rjmp	.+138    	; 0xad6 <DIO_enuTogglePin+0x90>
 a4c:	68 30       	cpi	r22, 0x08	; 8
 a4e:	08 f0       	brcs	.+2      	; 0xa52 <DIO_enuTogglePin+0xc>
 a50:	44 c0       	rjmp	.+136    	; 0xada <DIO_enuTogglePin+0x94>
	 {
		 Local_enuErrorStatus= DIO_NOK;
	 }		 
	else
	{
		switch (Copy_u8Port)
 a52:	81 30       	cpi	r24, 0x01	; 1
 a54:	b1 f0       	breq	.+44     	; 0xa82 <DIO_enuTogglePin+0x3c>
 a56:	81 30       	cpi	r24, 0x01	; 1
 a58:	30 f0       	brcs	.+12     	; 0xa66 <DIO_enuTogglePin+0x20>
 a5a:	82 30       	cpi	r24, 0x02	; 2
 a5c:	01 f1       	breq	.+64     	; 0xa9e <DIO_enuTogglePin+0x58>
 a5e:	83 30       	cpi	r24, 0x03	; 3
 a60:	09 f0       	breq	.+2      	; 0xa64 <DIO_enuTogglePin+0x1e>
 a62:	3d c0       	rjmp	.+122    	; 0xade <DIO_enuTogglePin+0x98>
 a64:	2a c0       	rjmp	.+84     	; 0xaba <DIO_enuTogglePin+0x74>
		{
			case DIO_u8_PORTA:
			DIO_u8_PORTA_REG ^= (1<<Copy_u8Pin);  
 a66:	2b b3       	in	r18, 0x1b	; 27
 a68:	81 e0       	ldi	r24, 0x01	; 1
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	ac 01       	movw	r20, r24
 a6e:	02 c0       	rjmp	.+4      	; 0xa74 <DIO_enuTogglePin+0x2e>
 a70:	44 0f       	add	r20, r20
 a72:	55 1f       	adc	r21, r21
 a74:	6a 95       	dec	r22
 a76:	e2 f7       	brpl	.-8      	; 0xa70 <DIO_enuTogglePin+0x2a>
 a78:	ba 01       	movw	r22, r20
 a7a:	62 27       	eor	r22, r18
 a7c:	6b bb       	out	0x1b, r22	; 27



DIO_tenuErrorStatus DIO_enuTogglePin(u8 Copy_u8Port, u8 Copy_u8Pin)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 a7e:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch (Copy_u8Port)
		{
			case DIO_u8_PORTA:
			DIO_u8_PORTA_REG ^= (1<<Copy_u8Pin);  
			break;
 a80:	08 95       	ret

			case DIO_u8_PORTB:
			DIO_u8_PORTB_REG ^= (1<<Copy_u8Pin);
 a82:	28 b3       	in	r18, 0x18	; 24
 a84:	81 e0       	ldi	r24, 0x01	; 1
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	ac 01       	movw	r20, r24
 a8a:	02 c0       	rjmp	.+4      	; 0xa90 <DIO_enuTogglePin+0x4a>
 a8c:	44 0f       	add	r20, r20
 a8e:	55 1f       	adc	r21, r21
 a90:	6a 95       	dec	r22
 a92:	e2 f7       	brpl	.-8      	; 0xa8c <DIO_enuTogglePin+0x46>
 a94:	ba 01       	movw	r22, r20
 a96:	62 27       	eor	r22, r18
 a98:	68 bb       	out	0x18, r22	; 24



DIO_tenuErrorStatus DIO_enuTogglePin(u8 Copy_u8Port, u8 Copy_u8Pin)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 a9a:	80 e0       	ldi	r24, 0x00	; 0
			DIO_u8_PORTA_REG ^= (1<<Copy_u8Pin);  
			break;

			case DIO_u8_PORTB:
			DIO_u8_PORTB_REG ^= (1<<Copy_u8Pin);
			break;
 a9c:	08 95       	ret

			case DIO_u8_PORTC:
			DIO_u8_PORTC_REG ^= (1<<Copy_u8Pin);
 a9e:	25 b3       	in	r18, 0x15	; 21
 aa0:	81 e0       	ldi	r24, 0x01	; 1
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	ac 01       	movw	r20, r24
 aa6:	02 c0       	rjmp	.+4      	; 0xaac <DIO_enuTogglePin+0x66>
 aa8:	44 0f       	add	r20, r20
 aaa:	55 1f       	adc	r21, r21
 aac:	6a 95       	dec	r22
 aae:	e2 f7       	brpl	.-8      	; 0xaa8 <DIO_enuTogglePin+0x62>
 ab0:	ba 01       	movw	r22, r20
 ab2:	62 27       	eor	r22, r18
 ab4:	65 bb       	out	0x15, r22	; 21



DIO_tenuErrorStatus DIO_enuTogglePin(u8 Copy_u8Port, u8 Copy_u8Pin)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 ab6:	80 e0       	ldi	r24, 0x00	; 0
			DIO_u8_PORTB_REG ^= (1<<Copy_u8Pin);
			break;

			case DIO_u8_PORTC:
			DIO_u8_PORTC_REG ^= (1<<Copy_u8Pin);
			break;
 ab8:	08 95       	ret

			case DIO_u8_PORTD:
			DIO_u8_PORTD_REG  ^=(1<<Copy_u8Pin);
 aba:	22 b3       	in	r18, 0x12	; 18
 abc:	81 e0       	ldi	r24, 0x01	; 1
 abe:	90 e0       	ldi	r25, 0x00	; 0
 ac0:	ac 01       	movw	r20, r24
 ac2:	02 c0       	rjmp	.+4      	; 0xac8 <DIO_enuTogglePin+0x82>
 ac4:	44 0f       	add	r20, r20
 ac6:	55 1f       	adc	r21, r21
 ac8:	6a 95       	dec	r22
 aca:	e2 f7       	brpl	.-8      	; 0xac4 <DIO_enuTogglePin+0x7e>
 acc:	ba 01       	movw	r22, r20
 ace:	62 27       	eor	r22, r18
 ad0:	62 bb       	out	0x12, r22	; 18



DIO_tenuErrorStatus DIO_enuTogglePin(u8 Copy_u8Port, u8 Copy_u8Pin)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 ad2:	80 e0       	ldi	r24, 0x00	; 0
			DIO_u8_PORTC_REG ^= (1<<Copy_u8Pin);
			break;

			case DIO_u8_PORTD:
			DIO_u8_PORTD_REG  ^=(1<<Copy_u8Pin);
			break;
 ad4:	08 95       	ret
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
	//check error status //
	if(Copy_u8Port > DIO_u8_PORTD || Copy_u8Pin > DIO_u8_PIN7 )
	 {
		 Local_enuErrorStatus= DIO_NOK;
 ad6:	81 e0       	ldi	r24, 0x01	; 1
 ad8:	08 95       	ret
 ada:	81 e0       	ldi	r24, 0x01	; 1
 adc:	08 95       	ret



DIO_tenuErrorStatus DIO_enuTogglePin(u8 Copy_u8Port, u8 Copy_u8Pin)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 ade:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}
	return Local_enuErrorStatus;

}
 ae0:	08 95       	ret

00000ae2 <INT_vidEnableGlobalINT>:
#include "Global_Interrupt_int.h"
#include "Global_Interrupt_prv.h"

void INT_vidEnableGlobalINT()
{
	EXT_INT_u8_SREG_REG  |=0x80;
 ae2:	8f b7       	in	r24, 0x3f	; 63
 ae4:	80 68       	ori	r24, 0x80	; 128
 ae6:	8f bf       	out	0x3f, r24	; 63

}
 ae8:	08 95       	ret

00000aea <INT_vidDisableGlobalINT>:

void INT_vidDisableGlobalINT()
{
	EXT_INT_u8_SREG_REG  =0x00;
 aea:	1f be       	out	0x3f, r1	; 63
}
 aec:	08 95       	ret

00000aee <__fixunssfsi>:
 aee:	70 d0       	rcall	.+224    	; 0xbd0 <__fp_splitA>
 af0:	88 f0       	brcs	.+34     	; 0xb14 <__fixunssfsi+0x26>
 af2:	9f 57       	subi	r25, 0x7F	; 127
 af4:	90 f0       	brcs	.+36     	; 0xb1a <__fixunssfsi+0x2c>
 af6:	b9 2f       	mov	r27, r25
 af8:	99 27       	eor	r25, r25
 afa:	b7 51       	subi	r27, 0x17	; 23
 afc:	a0 f0       	brcs	.+40     	; 0xb26 <__fixunssfsi+0x38>
 afe:	d1 f0       	breq	.+52     	; 0xb34 <__fixunssfsi+0x46>
 b00:	66 0f       	add	r22, r22
 b02:	77 1f       	adc	r23, r23
 b04:	88 1f       	adc	r24, r24
 b06:	99 1f       	adc	r25, r25
 b08:	1a f0       	brmi	.+6      	; 0xb10 <__fixunssfsi+0x22>
 b0a:	ba 95       	dec	r27
 b0c:	c9 f7       	brne	.-14     	; 0xb00 <__fixunssfsi+0x12>
 b0e:	12 c0       	rjmp	.+36     	; 0xb34 <__fixunssfsi+0x46>
 b10:	b1 30       	cpi	r27, 0x01	; 1
 b12:	81 f0       	breq	.+32     	; 0xb34 <__fixunssfsi+0x46>
 b14:	77 d0       	rcall	.+238    	; 0xc04 <__fp_zero>
 b16:	b1 e0       	ldi	r27, 0x01	; 1
 b18:	08 95       	ret
 b1a:	74 c0       	rjmp	.+232    	; 0xc04 <__fp_zero>
 b1c:	67 2f       	mov	r22, r23
 b1e:	78 2f       	mov	r23, r24
 b20:	88 27       	eor	r24, r24
 b22:	b8 5f       	subi	r27, 0xF8	; 248
 b24:	39 f0       	breq	.+14     	; 0xb34 <__fixunssfsi+0x46>
 b26:	b9 3f       	cpi	r27, 0xF9	; 249
 b28:	cc f3       	brlt	.-14     	; 0xb1c <__fixunssfsi+0x2e>
 b2a:	86 95       	lsr	r24
 b2c:	77 95       	ror	r23
 b2e:	67 95       	ror	r22
 b30:	b3 95       	inc	r27
 b32:	d9 f7       	brne	.-10     	; 0xb2a <__fixunssfsi+0x3c>
 b34:	3e f4       	brtc	.+14     	; 0xb44 <__fixunssfsi+0x56>
 b36:	90 95       	com	r25
 b38:	80 95       	com	r24
 b3a:	70 95       	com	r23
 b3c:	61 95       	neg	r22
 b3e:	7f 4f       	sbci	r23, 0xFF	; 255
 b40:	8f 4f       	sbci	r24, 0xFF	; 255
 b42:	9f 4f       	sbci	r25, 0xFF	; 255
 b44:	08 95       	ret

00000b46 <__floatunsisf>:
 b46:	e8 94       	clt
 b48:	09 c0       	rjmp	.+18     	; 0xb5c <__floatsisf+0x12>

00000b4a <__floatsisf>:
 b4a:	97 fb       	bst	r25, 7
 b4c:	3e f4       	brtc	.+14     	; 0xb5c <__floatsisf+0x12>
 b4e:	90 95       	com	r25
 b50:	80 95       	com	r24
 b52:	70 95       	com	r23
 b54:	61 95       	neg	r22
 b56:	7f 4f       	sbci	r23, 0xFF	; 255
 b58:	8f 4f       	sbci	r24, 0xFF	; 255
 b5a:	9f 4f       	sbci	r25, 0xFF	; 255
 b5c:	99 23       	and	r25, r25
 b5e:	a9 f0       	breq	.+42     	; 0xb8a <__floatsisf+0x40>
 b60:	f9 2f       	mov	r31, r25
 b62:	96 e9       	ldi	r25, 0x96	; 150
 b64:	bb 27       	eor	r27, r27
 b66:	93 95       	inc	r25
 b68:	f6 95       	lsr	r31
 b6a:	87 95       	ror	r24
 b6c:	77 95       	ror	r23
 b6e:	67 95       	ror	r22
 b70:	b7 95       	ror	r27
 b72:	f1 11       	cpse	r31, r1
 b74:	f8 cf       	rjmp	.-16     	; 0xb66 <__floatsisf+0x1c>
 b76:	fa f4       	brpl	.+62     	; 0xbb6 <__floatsisf+0x6c>
 b78:	bb 0f       	add	r27, r27
 b7a:	11 f4       	brne	.+4      	; 0xb80 <__floatsisf+0x36>
 b7c:	60 ff       	sbrs	r22, 0
 b7e:	1b c0       	rjmp	.+54     	; 0xbb6 <__floatsisf+0x6c>
 b80:	6f 5f       	subi	r22, 0xFF	; 255
 b82:	7f 4f       	sbci	r23, 0xFF	; 255
 b84:	8f 4f       	sbci	r24, 0xFF	; 255
 b86:	9f 4f       	sbci	r25, 0xFF	; 255
 b88:	16 c0       	rjmp	.+44     	; 0xbb6 <__floatsisf+0x6c>
 b8a:	88 23       	and	r24, r24
 b8c:	11 f0       	breq	.+4      	; 0xb92 <__floatsisf+0x48>
 b8e:	96 e9       	ldi	r25, 0x96	; 150
 b90:	11 c0       	rjmp	.+34     	; 0xbb4 <__floatsisf+0x6a>
 b92:	77 23       	and	r23, r23
 b94:	21 f0       	breq	.+8      	; 0xb9e <__floatsisf+0x54>
 b96:	9e e8       	ldi	r25, 0x8E	; 142
 b98:	87 2f       	mov	r24, r23
 b9a:	76 2f       	mov	r23, r22
 b9c:	05 c0       	rjmp	.+10     	; 0xba8 <__floatsisf+0x5e>
 b9e:	66 23       	and	r22, r22
 ba0:	71 f0       	breq	.+28     	; 0xbbe <__floatsisf+0x74>
 ba2:	96 e8       	ldi	r25, 0x86	; 134
 ba4:	86 2f       	mov	r24, r22
 ba6:	70 e0       	ldi	r23, 0x00	; 0
 ba8:	60 e0       	ldi	r22, 0x00	; 0
 baa:	2a f0       	brmi	.+10     	; 0xbb6 <__floatsisf+0x6c>
 bac:	9a 95       	dec	r25
 bae:	66 0f       	add	r22, r22
 bb0:	77 1f       	adc	r23, r23
 bb2:	88 1f       	adc	r24, r24
 bb4:	da f7       	brpl	.-10     	; 0xbac <__floatsisf+0x62>
 bb6:	88 0f       	add	r24, r24
 bb8:	96 95       	lsr	r25
 bba:	87 95       	ror	r24
 bbc:	97 f9       	bld	r25, 7
 bbe:	08 95       	ret

00000bc0 <__fp_split3>:
 bc0:	57 fd       	sbrc	r21, 7
 bc2:	90 58       	subi	r25, 0x80	; 128
 bc4:	44 0f       	add	r20, r20
 bc6:	55 1f       	adc	r21, r21
 bc8:	59 f0       	breq	.+22     	; 0xbe0 <__fp_splitA+0x10>
 bca:	5f 3f       	cpi	r21, 0xFF	; 255
 bcc:	71 f0       	breq	.+28     	; 0xbea <__fp_splitA+0x1a>
 bce:	47 95       	ror	r20

00000bd0 <__fp_splitA>:
 bd0:	88 0f       	add	r24, r24
 bd2:	97 fb       	bst	r25, 7
 bd4:	99 1f       	adc	r25, r25
 bd6:	61 f0       	breq	.+24     	; 0xbf0 <__fp_splitA+0x20>
 bd8:	9f 3f       	cpi	r25, 0xFF	; 255
 bda:	79 f0       	breq	.+30     	; 0xbfa <__fp_splitA+0x2a>
 bdc:	87 95       	ror	r24
 bde:	08 95       	ret
 be0:	12 16       	cp	r1, r18
 be2:	13 06       	cpc	r1, r19
 be4:	14 06       	cpc	r1, r20
 be6:	55 1f       	adc	r21, r21
 be8:	f2 cf       	rjmp	.-28     	; 0xbce <__fp_split3+0xe>
 bea:	46 95       	lsr	r20
 bec:	f1 df       	rcall	.-30     	; 0xbd0 <__fp_splitA>
 bee:	08 c0       	rjmp	.+16     	; 0xc00 <__fp_splitA+0x30>
 bf0:	16 16       	cp	r1, r22
 bf2:	17 06       	cpc	r1, r23
 bf4:	18 06       	cpc	r1, r24
 bf6:	99 1f       	adc	r25, r25
 bf8:	f1 cf       	rjmp	.-30     	; 0xbdc <__fp_splitA+0xc>
 bfa:	86 95       	lsr	r24
 bfc:	71 05       	cpc	r23, r1
 bfe:	61 05       	cpc	r22, r1
 c00:	08 94       	sec
 c02:	08 95       	ret

00000c04 <__fp_zero>:
 c04:	e8 94       	clt

00000c06 <__fp_szero>:
 c06:	bb 27       	eor	r27, r27
 c08:	66 27       	eor	r22, r22
 c0a:	77 27       	eor	r23, r23
 c0c:	cb 01       	movw	r24, r22
 c0e:	97 f9       	bld	r25, 7
 c10:	08 95       	ret

00000c12 <__mulsf3>:
 c12:	0b d0       	rcall	.+22     	; 0xc2a <__mulsf3x>
 c14:	78 c0       	rjmp	.+240    	; 0xd06 <__fp_round>
 c16:	69 d0       	rcall	.+210    	; 0xcea <__fp_pscA>
 c18:	28 f0       	brcs	.+10     	; 0xc24 <__mulsf3+0x12>
 c1a:	6e d0       	rcall	.+220    	; 0xcf8 <__fp_pscB>
 c1c:	18 f0       	brcs	.+6      	; 0xc24 <__mulsf3+0x12>
 c1e:	95 23       	and	r25, r21
 c20:	09 f0       	breq	.+2      	; 0xc24 <__mulsf3+0x12>
 c22:	5a c0       	rjmp	.+180    	; 0xcd8 <__fp_inf>
 c24:	5f c0       	rjmp	.+190    	; 0xce4 <__fp_nan>
 c26:	11 24       	eor	r1, r1
 c28:	ee cf       	rjmp	.-36     	; 0xc06 <__fp_szero>

00000c2a <__mulsf3x>:
 c2a:	ca df       	rcall	.-108    	; 0xbc0 <__fp_split3>
 c2c:	a0 f3       	brcs	.-24     	; 0xc16 <__mulsf3+0x4>

00000c2e <__mulsf3_pse>:
 c2e:	95 9f       	mul	r25, r21
 c30:	d1 f3       	breq	.-12     	; 0xc26 <__mulsf3+0x14>
 c32:	95 0f       	add	r25, r21
 c34:	50 e0       	ldi	r21, 0x00	; 0
 c36:	55 1f       	adc	r21, r21
 c38:	62 9f       	mul	r22, r18
 c3a:	f0 01       	movw	r30, r0
 c3c:	72 9f       	mul	r23, r18
 c3e:	bb 27       	eor	r27, r27
 c40:	f0 0d       	add	r31, r0
 c42:	b1 1d       	adc	r27, r1
 c44:	63 9f       	mul	r22, r19
 c46:	aa 27       	eor	r26, r26
 c48:	f0 0d       	add	r31, r0
 c4a:	b1 1d       	adc	r27, r1
 c4c:	aa 1f       	adc	r26, r26
 c4e:	64 9f       	mul	r22, r20
 c50:	66 27       	eor	r22, r22
 c52:	b0 0d       	add	r27, r0
 c54:	a1 1d       	adc	r26, r1
 c56:	66 1f       	adc	r22, r22
 c58:	82 9f       	mul	r24, r18
 c5a:	22 27       	eor	r18, r18
 c5c:	b0 0d       	add	r27, r0
 c5e:	a1 1d       	adc	r26, r1
 c60:	62 1f       	adc	r22, r18
 c62:	73 9f       	mul	r23, r19
 c64:	b0 0d       	add	r27, r0
 c66:	a1 1d       	adc	r26, r1
 c68:	62 1f       	adc	r22, r18
 c6a:	83 9f       	mul	r24, r19
 c6c:	a0 0d       	add	r26, r0
 c6e:	61 1d       	adc	r22, r1
 c70:	22 1f       	adc	r18, r18
 c72:	74 9f       	mul	r23, r20
 c74:	33 27       	eor	r19, r19
 c76:	a0 0d       	add	r26, r0
 c78:	61 1d       	adc	r22, r1
 c7a:	23 1f       	adc	r18, r19
 c7c:	84 9f       	mul	r24, r20
 c7e:	60 0d       	add	r22, r0
 c80:	21 1d       	adc	r18, r1
 c82:	82 2f       	mov	r24, r18
 c84:	76 2f       	mov	r23, r22
 c86:	6a 2f       	mov	r22, r26
 c88:	11 24       	eor	r1, r1
 c8a:	9f 57       	subi	r25, 0x7F	; 127
 c8c:	50 40       	sbci	r21, 0x00	; 0
 c8e:	8a f0       	brmi	.+34     	; 0xcb2 <__mulsf3_pse+0x84>
 c90:	e1 f0       	breq	.+56     	; 0xcca <__mulsf3_pse+0x9c>
 c92:	88 23       	and	r24, r24
 c94:	4a f0       	brmi	.+18     	; 0xca8 <__mulsf3_pse+0x7a>
 c96:	ee 0f       	add	r30, r30
 c98:	ff 1f       	adc	r31, r31
 c9a:	bb 1f       	adc	r27, r27
 c9c:	66 1f       	adc	r22, r22
 c9e:	77 1f       	adc	r23, r23
 ca0:	88 1f       	adc	r24, r24
 ca2:	91 50       	subi	r25, 0x01	; 1
 ca4:	50 40       	sbci	r21, 0x00	; 0
 ca6:	a9 f7       	brne	.-22     	; 0xc92 <__mulsf3_pse+0x64>
 ca8:	9e 3f       	cpi	r25, 0xFE	; 254
 caa:	51 05       	cpc	r21, r1
 cac:	70 f0       	brcs	.+28     	; 0xcca <__mulsf3_pse+0x9c>
 cae:	14 c0       	rjmp	.+40     	; 0xcd8 <__fp_inf>
 cb0:	aa cf       	rjmp	.-172    	; 0xc06 <__fp_szero>
 cb2:	5f 3f       	cpi	r21, 0xFF	; 255
 cb4:	ec f3       	brlt	.-6      	; 0xcb0 <__mulsf3_pse+0x82>
 cb6:	98 3e       	cpi	r25, 0xE8	; 232
 cb8:	dc f3       	brlt	.-10     	; 0xcb0 <__mulsf3_pse+0x82>
 cba:	86 95       	lsr	r24
 cbc:	77 95       	ror	r23
 cbe:	67 95       	ror	r22
 cc0:	b7 95       	ror	r27
 cc2:	f7 95       	ror	r31
 cc4:	e7 95       	ror	r30
 cc6:	9f 5f       	subi	r25, 0xFF	; 255
 cc8:	c1 f7       	brne	.-16     	; 0xcba <__mulsf3_pse+0x8c>
 cca:	fe 2b       	or	r31, r30
 ccc:	88 0f       	add	r24, r24
 cce:	91 1d       	adc	r25, r1
 cd0:	96 95       	lsr	r25
 cd2:	87 95       	ror	r24
 cd4:	97 f9       	bld	r25, 7
 cd6:	08 95       	ret

00000cd8 <__fp_inf>:
 cd8:	97 f9       	bld	r25, 7
 cda:	9f 67       	ori	r25, 0x7F	; 127
 cdc:	80 e8       	ldi	r24, 0x80	; 128
 cde:	70 e0       	ldi	r23, 0x00	; 0
 ce0:	60 e0       	ldi	r22, 0x00	; 0
 ce2:	08 95       	ret

00000ce4 <__fp_nan>:
 ce4:	9f ef       	ldi	r25, 0xFF	; 255
 ce6:	80 ec       	ldi	r24, 0xC0	; 192
 ce8:	08 95       	ret

00000cea <__fp_pscA>:
 cea:	00 24       	eor	r0, r0
 cec:	0a 94       	dec	r0
 cee:	16 16       	cp	r1, r22
 cf0:	17 06       	cpc	r1, r23
 cf2:	18 06       	cpc	r1, r24
 cf4:	09 06       	cpc	r0, r25
 cf6:	08 95       	ret

00000cf8 <__fp_pscB>:
 cf8:	00 24       	eor	r0, r0
 cfa:	0a 94       	dec	r0
 cfc:	12 16       	cp	r1, r18
 cfe:	13 06       	cpc	r1, r19
 d00:	14 06       	cpc	r1, r20
 d02:	05 06       	cpc	r0, r21
 d04:	08 95       	ret

00000d06 <__fp_round>:
 d06:	09 2e       	mov	r0, r25
 d08:	03 94       	inc	r0
 d0a:	00 0c       	add	r0, r0
 d0c:	11 f4       	brne	.+4      	; 0xd12 <__fp_round+0xc>
 d0e:	88 23       	and	r24, r24
 d10:	52 f0       	brmi	.+20     	; 0xd26 <__fp_round+0x20>
 d12:	bb 0f       	add	r27, r27
 d14:	40 f4       	brcc	.+16     	; 0xd26 <__fp_round+0x20>
 d16:	bf 2b       	or	r27, r31
 d18:	11 f4       	brne	.+4      	; 0xd1e <__fp_round+0x18>
 d1a:	60 ff       	sbrs	r22, 0
 d1c:	04 c0       	rjmp	.+8      	; 0xd26 <__fp_round+0x20>
 d1e:	6f 5f       	subi	r22, 0xFF	; 255
 d20:	7f 4f       	sbci	r23, 0xFF	; 255
 d22:	8f 4f       	sbci	r24, 0xFF	; 255
 d24:	9f 4f       	sbci	r25, 0xFF	; 255
 d26:	08 95       	ret

00000d28 <__udivmodhi4>:
 d28:	aa 1b       	sub	r26, r26
 d2a:	bb 1b       	sub	r27, r27
 d2c:	51 e1       	ldi	r21, 0x11	; 17
 d2e:	07 c0       	rjmp	.+14     	; 0xd3e <__udivmodhi4_ep>

00000d30 <__udivmodhi4_loop>:
 d30:	aa 1f       	adc	r26, r26
 d32:	bb 1f       	adc	r27, r27
 d34:	a6 17       	cp	r26, r22
 d36:	b7 07       	cpc	r27, r23
 d38:	10 f0       	brcs	.+4      	; 0xd3e <__udivmodhi4_ep>
 d3a:	a6 1b       	sub	r26, r22
 d3c:	b7 0b       	sbc	r27, r23

00000d3e <__udivmodhi4_ep>:
 d3e:	88 1f       	adc	r24, r24
 d40:	99 1f       	adc	r25, r25
 d42:	5a 95       	dec	r21
 d44:	a9 f7       	brne	.-22     	; 0xd30 <__udivmodhi4_loop>
 d46:	80 95       	com	r24
 d48:	90 95       	com	r25
 d4a:	bc 01       	movw	r22, r24
 d4c:	cd 01       	movw	r24, r26
 d4e:	08 95       	ret

00000d50 <__udivmodsi4>:
 d50:	a1 e2       	ldi	r26, 0x21	; 33
 d52:	1a 2e       	mov	r1, r26
 d54:	aa 1b       	sub	r26, r26
 d56:	bb 1b       	sub	r27, r27
 d58:	fd 01       	movw	r30, r26
 d5a:	0d c0       	rjmp	.+26     	; 0xd76 <__udivmodsi4_ep>

00000d5c <__udivmodsi4_loop>:
 d5c:	aa 1f       	adc	r26, r26
 d5e:	bb 1f       	adc	r27, r27
 d60:	ee 1f       	adc	r30, r30
 d62:	ff 1f       	adc	r31, r31
 d64:	a2 17       	cp	r26, r18
 d66:	b3 07       	cpc	r27, r19
 d68:	e4 07       	cpc	r30, r20
 d6a:	f5 07       	cpc	r31, r21
 d6c:	20 f0       	brcs	.+8      	; 0xd76 <__udivmodsi4_ep>
 d6e:	a2 1b       	sub	r26, r18
 d70:	b3 0b       	sbc	r27, r19
 d72:	e4 0b       	sbc	r30, r20
 d74:	f5 0b       	sbc	r31, r21

00000d76 <__udivmodsi4_ep>:
 d76:	66 1f       	adc	r22, r22
 d78:	77 1f       	adc	r23, r23
 d7a:	88 1f       	adc	r24, r24
 d7c:	99 1f       	adc	r25, r25
 d7e:	1a 94       	dec	r1
 d80:	69 f7       	brne	.-38     	; 0xd5c <__udivmodsi4_loop>
 d82:	60 95       	com	r22
 d84:	70 95       	com	r23
 d86:	80 95       	com	r24
 d88:	90 95       	com	r25
 d8a:	9b 01       	movw	r18, r22
 d8c:	ac 01       	movw	r20, r24
 d8e:	bd 01       	movw	r22, r26
 d90:	cf 01       	movw	r24, r30
 d92:	08 95       	ret

00000d94 <_exit>:
 d94:	f8 94       	cli

00000d96 <__stop_program>:
 d96:	ff cf       	rjmp	.-2      	; 0xd96 <__stop_program>
